<%  if add_publics && global_info.n_publics > 0 { %>
    signal input <%= prefix %>publics[<%= global_info.n_publics %>];
<%  } %>
<%  if  stark_info.get_n_airgroup_values() > 0 { %>
    signal input <%= prefix %>airgroupvalues[<%= stark_info.get_n_airgroup_values() %>][3];
<%  } %>

<%  if stark_info.get_n_airvalues() > 0 { %>
    signal input <%= prefix %>airvalues[<%= stark_info.get_n_airvalues() %>][3];
<%  } %>

<%  if global_info.proof_values_map.as_ref().unwrap().len() > 0 { %>
    signal input <%= prefix %>proofvalues[<%= global_info.proof_values_map.as_ref().unwrap().len() %>][3];
<%  } %>

<%  for s in 1..=stark_info.n_stages + 1 { %>
<%    if stark_info.stark_struct.verification_hash_type == "BN128" { %>
    signal input <%= prefix %>root<%= s %>;
<%    } else { %>
    signal input <%= prefix %>root<%= s %>[4];
<%    } %>
<%  } %>

    signal input <%= prefix %>evals[<%= stark_info.ev_map.len() %>][3]; // Evaluations of the set polynomials at a challenge value z and gz

    signal input <%= prefix %>s0_valsC[<%= stark_info.stark_struct.n_queries %>][<%= stark_info.n_constants %>];
<%  if stark_info.stark_struct.verification_hash_type == "BN128" { %>
    signal input <%= prefix %>s0_siblingsC[<%= stark_info.stark_struct.n_queries %>][<%= ((stark_info.stark_struct.steps[0].n_bits as f64 - 1.0) / (stark_info.stark_struct.merkle_tree_arity as f64).log2() + 1.0).floor() as u64 %>][<%= stark_info.stark_struct.merkle_tree_arity %>];
<%  } else { %>
    signal input <%= prefix %>s0_siblingsC[<%= stark_info.stark_struct.n_queries %>][<%= stark_info.stark_struct.steps[0].n_bits %>][4];
<%  } %>

<%  for i in 0..stark_info.custom_commits.len() { %>
    signal input <%= prefix %>s0_vals_<%= stark_info.custom_commits[i].name %>_0[<%= stark_info.stark_struct.n_queries %>][<%= stark_info.custom_commits[i].stage_widths[0] %>];
<%  if stark_info.stark_struct.verification_hash_type == "BN128" { %>
    signal input <%= prefix %>s0_siblings_<%= stark_info.custom_commits[i].name %>_0[<%= stark_info.stark_struct.n_queries %>][<%= ((stark_info.stark_struct.steps[0].n_bits as f64 - 1.0) / (stark_info.stark_struct.merkle_tree_arity as f64).log2() + 1.0).floor() as u64 %>][<%= stark_info.stark_struct.merkle_tree_arity %>];
<%  } else { %>
    signal input <%= prefix %>s0_siblings_<%= stark_info.custom_commits[i].name %>_0[<%= stark_info.stark_struct.n_queries %>][<%= stark_info.stark_struct.steps[0].n_bits %>][4];
<%  } %>
<%  } %>

<%  for s in 1..=stark_info.n_stages + 1 { %>
<%      let cm_section = stark_info.map_sections_n.get(&format!("cm{}", s)).unwrap_or(&0); %>
<%      if *cm_section > 0 { %>
    signal input <%= prefix %>s0_vals<%= s %>[<%= stark_info.stark_struct.n_queries %>][<%= *cm_section %>];
<%          if stark_info.stark_struct.verification_hash_type == "BN128" { %>    
    signal input <%= prefix %>s0_siblings<%= s %>[<%= stark_info.stark_struct.n_queries %>][<%= ((stark_info.stark_struct.steps[0].n_bits as f64 - 1.0) / (stark_info.stark_struct.merkle_tree_arity as f64).log2() + 1.0).floor() as u64 %>][<%= stark_info.stark_struct.merkle_tree_arity %>];
<%          } else { %>
    signal input <%= prefix %>s0_siblings<%= s %>[<%= stark_info.stark_struct.n_queries %>][<%= stark_info.stark_struct.steps[0].n_bits %>][4];
<%          } %>
<%      } %>
<% } %>

<% for s in 1..stark_info.stark_struct.steps.len() { %>
<%    if stark_info.stark_struct.verification_hash_type == "BN128" { %>
    signal input <%= prefix %>s<%= s %>_root;
<%    } else { %>
    signal input <%= prefix %>s<%= s %>_root[4];
<%    } %>
<% }                                                  %>

<%  for s in 1..stark_info.stark_struct.steps.len() {   %>
    signal input <%= prefix %>s<%= s %>_vals[<%= stark_info.stark_struct.n_queries %>][<%=  (1 << (stark_info.stark_struct.steps[s - 1].n_bits - stark_info.stark_struct.steps[s].n_bits))*3 %>];
<%          if stark_info.stark_struct.verification_hash_type == "BN128" { %>    
    signal input <%= prefix %>s<%= s %>_siblings[<%= stark_info.stark_struct.n_queries %>][<%=((stark_info.stark_struct.steps[s].n_bits as f64 - 1.0) / (stark_info.stark_struct.merkle_tree_arity as f64).log2() + 1.0).floor() as u64 %>][<%= stark_info.stark_struct.merkle_tree_arity %>];
<%          } else { %>
    signal input <%= prefix %>s<%= s %>_siblings[<%= stark_info.stark_struct.n_queries %>][<%= stark_info.stark_struct.steps[s].n_bits %>][4];
<%          } %>
<% }                                                  %>

    signal input <%= prefix %>finalPol[<%= 1 << stark_info.stark_struct.steps.last().unwrap().n_bits %>][3];