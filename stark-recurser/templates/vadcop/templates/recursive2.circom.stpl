pragma circom 2.1.0;
pragma custom_templates;

include "select_vk.circom";
include "agg_values.circom";
include "<%= verifier_filename %>";

template Recursive2() {
    <% let airgroup_id = stark_info.airgroup_id.unwrap() as usize; %>
    var rootCBasics[<%= global_info.airs[airgroup_id].len() %>][4];

<% for i in 0..global_info.airs[airgroup_id].len() { %>
    rootCBasics[<%= i %>] = [<%=  basic_vk[i].join(",") %>];
<%  } %>

<%= define_inputs_a %>
<%= define_inputs_b %>

<%  if global_info.n_publics > 0 { %>
    signal input publics[<%= global_info.n_publics %>];
<%  } %>

    signal input challenges[<%= global_info.n_challenges.iter().fold(4, |acc, &nc| acc + nc) %>][3];
    signal input challengesFRISteps[<%= global_info.steps_fri.len() + 1 %>][3];

    signal input rootCAgg[4];

<%  if global_info.agg_types[airgroup_id].len() > 0 { %>
    signal input aggregationTypes[<%= global_info.agg_types[airgroup_id].len() %>];
<%  } %>

<%= define_vadcop_inputs_a %>
<%= define_vadcop_inputs_b %>

<% include!("../../basic/vadcop/define_vadcop_inputs.circom.stpl"); %>

<%= assign_stark_inputs_a %>
<%= assign_stark_inputs_b %>

<%= assign_vadcop_inputs_a %>
<%= assign_vadcop_inputs_a %>

<% if global_info.air_groups.len() == 1 && global_info.airs[0].len() == 1 { %>
    vA.rootC <== SelectVerificationKey(<%= global_info.airs[airgroup_id].len() %>)(a_sv_circuitType, rootCBasics, rootCAgg);
    vB.rootC <== SelectVerificationKey(<%= global_info.airs[airgroup_id].len() %>)(b_sv_circuitType, rootCBasics, rootCAgg);
<%  } else { %>
    vA.rootC <== SelectVerificationKeyNull(<%= global_info.airs[airgroup_id].len() %>)(a_sv_circuitType, rootCBasics, rootCAgg);
    vB.rootC <== SelectVerificationKeyNull(<%= global_info.airs[airgroup_id].len() %>)(b_sv_circuitType, rootCBasics, rootCAgg);
<%  } %>

<% include!("../../basic/vadcop/agg_vadcop_inputs.circom.stpl"); %>

    for (var i=0; i < 4; i++) {
        vA.publics[<%= stark_info.n_publics - 4 %> + i] <== rootCAgg[i];
        vB.publics[<%= stark_info.n_publics - 4 %> + i] <== rootCAgg[i];
    }
}


<% let publics = if global_info.n_publics > 0 { "[publics, challenges, challengesFRISteps]" } else { "[challenges, challengesFRISteps]" }; %>
component main { public [<%= publics %>]} = Recursive2();