use common::WCPilout;

pub struct FibonacciVadcopPilout;

impl FibonacciVadcopPilout {
    pub fn get_fibonacci_vadcop_pilout() -> WCPilout {
        let mut pilout = WCPilout::new("FibonacciVadcopPilOut", 2, b"fibonacci-vadcop-hash".to_vec());

        let air_group = pilout.add_air_group(Some("FibonacciSquare"));
        air_group.add_air(Some("FibonacciSquare"), 10);

        let air_group = pilout.add_air_group(Some("Module"));
        air_group.add_air(Some("Module"), 10);

        let air_group = pilout.add_air_group(Some("U8Air"));
        air_group.add_air(Some("U8Air"), 8);

        pilout
    }
}

// // This file is autogenerated from the pilout file.
// // Don't modify it manually.
// use common::WCPilout;

// pub const PILOUT_HASH: &[u8] = b"fibonacci-vadcop-hash";

// //AIR CONSTANTS
// pub const FIBONACCI_AIR_IDS: &[usize] = &[0];
// pub const MODULES_AIR_IDS: &[usize] = &[0];

// pub struct Pilout;

// impl Pilout {
//     pub fn get_fibonacci_vadcop_pilout() -> WCPilout {
//         let mut pilout = WCPilout::new("Zisk", 2, PILOUT_HASH.to_vec());

//         let air_group = pilout.add_air_group(Some("FibonacciSquare"));
//         air_group.add_air(Some("FibonacciSquare"), 10);

//         let air_group = pilout.add_air_group(Some("Module"));
//         air_group.add_air(Some("Module"), 10);

//         pilout
//     }
// }
