use clap::Parser;
use colored::Colorize;
use std::path::{Path, PathBuf};
use std::fs;

#[derive(Parser)]
#[command(version, about, long_about = None)]
#[command(propagate_version = true)]
pub struct NewCmd {
    /// Name of the new project
    pub name: String,

    /// Proofman configuration file path
    #[clap(short, long)]
    pub pilout: PathBuf,
}

impl NewCmd {
    pub fn run(&self) -> Result<(), Box<dyn std::error::Error>> {
        println!("{} {}", format!("{: >12}", "Command").bright_green().bold(), "New project");
        println!("");

        println!("Creating new proofman project: {}", self.name);
        println!("Using pilout file: {:?}", self.pilout);

        let root_folder = Path::new(&self.name);
        let data_folder = root_folder.join("data");
        let src_folder = root_folder.join("src");

        // Create the project root directory
        const GIT_IGNORE: &str = include_str!("../../assets/code/.gitignore");
        const CARGO_TOML: &str = include_str!("../../assets/code/Cargo.toml");
        const PROOFMAN_CONFIG_JSON: &str = include_str!("../../assets/code/proofman.config.json");

        fs::create_dir(root_folder)?;
        fs::write(root_folder.join(".gitignore"), GIT_IGNORE)?;
        fs::write(root_folder.join("Cargo.toml"), CARGO_TOML)?;
        fs::write(root_folder.join("proofman.config.json"), PROOFMAN_CONFIG_JSON)?;

        // Create the data directory.
        fs::create_dir(&data_folder)?;
        fs::copy(&self.pilout, data_folder.join(&self.pilout))?;

        // Create the src directory.
        const MAIN_RS: &str = include_str!("../../assets/code/main.rs");

        fs::create_dir(&src_folder)?;
        fs::write(src_folder.join("main.rs"), MAIN_RS)?;

        // create src/autogenerated assets
        fs::create_dir(src_folder.join("autogenerated"))?;
        // TODO! Call trace setup command here

        // create src/witness_computation assets
        fs::create_dir(src_folder.join("witness_computation"))?;
        // TODO! For each subproof in pilout, create a new file in src/witness_computation

        Ok(())
    }
}
