require "std_common.pil"

/**
 * Verifies the number of columns of same PIOP check (assumes, proves) is the same.
 * @param opid (unique) identifier of the PIOP check
 * @param type if 1, it is a lookup or a range check; if 0, it is a permutation
 * @param cols_count number of columns of the PIOP check
 * @param proves 1 if proves, 0 if assumes
 */
private function check_gsum_opid_and_cols(int proves, int type, int opid, int cols_count) {

    if (cols_count < 1) {
        error(`The number of columns of PIOP #${opid} must be at least 1`);
    }

    container proof.std.gsum alias gsum {
        // FIX: dynamic arrays not ready
        int opids_count = 0;
        int opids[100];
        expr gsum = 0;  // Resulting sum of every subproof and every air.
                        // Declared as expression (unknown at runtime), but used as field element.
    }

    container subproof.std.gsum {
        subproofval aggregate(sum) gsum_result;
    }

    container air.std.gsum {
        // FIX: dynamic arrays not ready
        int gsum_assumes_count = 0;
        expr gsum_assumes_sel[100];
        expr gsum_assumes[100];

        int gsum_proves_count = 0;
        expr gsum_proves_type[100];
        expr gsum_proves_sel[100];
        expr gsum_proves[100];
    }

    container proof.std.gsum.`id${opid}` alias gsumid {
        int cols;
        int proves = 0;
        int assumes = 0;
        int type = 0;
    }

    if (gsumid.cols == 0) {
        // first time called
        gsumid.cols = cols_count;
        gsumid.type = type;
        // add opid on a list to verify at final
        gsum.opids[gsum.opids_count] = opid;
        gsum.opids_count = gsum.opids_count + 1;
    } else {
        if (gsumid.cols != cols_count) {
            error(`The number of columns of PIOP #${opid} must be ${piopid.cols} but was ${cols_count}`);
        }
        if (gsumid.type != type) {
            error(`The #${opid} was declared previously different type, as ${gsumid.type==1?'permutation':'lookup'}`);
        }
    }

    if (proves) {
        gsumid.proves = gsumid.proves + 1;
    } else {
        gsumid.assumes = gsumid.assumes + 1;
    }
}

/**
 * Given columns C₀,...,Cₙ₋₁, and multiplicity counter M, it 1] defines the constraints at the air level, 2] updates the values at the subproof level, and 3] updates the constraints at the proof level.
 * @param proves boolean indicating if updating a proves or a assumes
 * @param type if 1, it is a lookup or a range check; if 0, it is a permutation
 * @param opid (unique) identifier of the PIOP
 * @param sel selector of the PIOP
 * @param cols columns of the PIOP
 */
private function piop_update(int proves, int type, int opid, expr sel, expr cols[]) {
    // verify if correct opid and cols
    check_gsum_opid_and_cols(proves, type, opid, length(cols));

    init_challenges(type == 1 ? 3:2);

    // selected vector to simple column reduction
    expr cols_compressed = compress_cols(opid, cols);

    use air.std.gsum;
    if (proves) {
        // adding all sums of proves called in this air
        gsum_proves_type[gsum_proves_count] = type;
        gsum_proves_sel[gsum_proves_count] = sel;
        gsum_proves[gsum_proves_count] = cols_compressed;
        gsum_proves_count = gsum_proves_count + 1;
    } else {
        // adding all sums of assumes called in this air
        gsum_assumes_sel[gsum_assumes_count] = sel;
        gsum_assumes[gsum_assumes_count] = cols_compressed;
        gsum_assumes_count = gsum_assumes_count + 1;
    }

    // QUESTION: Should the user proves the multiplicity counter? Or we should compute it?
    // 0] computes the multiplicity counter for lookups and range checks
    // on final air compute_multiplicities_lookup_range();

    // 1] look for repeated proves/assumes's in both lookups and range checks and, if found, optimize
    // on final air lookup_range_proves_batch();

    // 2] define constraints at the air level
    on final air PIOP_gsum_air_end();

    // 3] update values at the subproof level
    on final subproof PIOP_gsum_subproof();

    // 4] update constraints at the proof level
    on final proof PIOP_gsum_proof();
}

private function PIOP_gsum_air_end() {
    use air.std.gsum;
    
    col witness stage(2) gsum;
    
    //                                mt1       mt2       mt3       mf1       mf2       mf3
    //  gsum === 'gsum * (1 - L1) + ------- + ------- + ------- - ------- - ------- - -------
    //                                t1        t2        t3        f1        f2        f3

    col fixed L1 = [1,0...];

    expr LHS = 1;
    expr RHS1 = 0;

    const expr gsP[gsum_proves_count];
    for (int i = 0; i < gsum_proves_count; i = i + 1) {
        // ERROR: gsP[i] === gsum_proves[i];
        gsP[i] = gsum_proves[i];
    }
    const expr gsA[gsum_assumes_count];
    for (int i = 0; i < gsum_assumes_count; i = i + 1) {
        // ERROR: gsA[i] === gsum_assumes[i];
        gsA[i] = gsum_assumes[i];
    }
    
    for (int i = 0; i < gsum_proves_count; i = i + 1) {
        LHS = LHS * gsP[i];

        expr tmp = gsum_proves_sel[i];
        for (int j = 0; j < gsum_proves_count; j = j + 1) {
            if (j != i) tmp = tmp * gsP[j];
        }
        RHS1 = RHS1 + tmp;
    }

    const expr RHS2a = LHS;
    expr RHS2b = 0;

    for (int i = 0; i < gsum_assumes_count; i = i + 1) {
        LHS = LHS * gsA[i];
        RHS1 = RHS1 * gsA[i];
    
        expr tmp = gsum_assumes_sel[i];
        for (int j = 0; j < gsum_assumes_count; j = j + 1) {
            if (j != i) tmp = tmp * gsA[j];
        }
        RHS2b = RHS2b + tmp;
    }

    expr RHS2 = RHS2a * RHS2b;
    expr RHS = RHS1 - RHS2;

    @gsum{reference: gsum, numerator: LHS, denominator: RHS}

    (gsum - 'gsum * (1 - L1)) * LHS === RHS;
    L1' * (gsum - subproof.std.gsum.gsum_result) === 0;
}

private function PIOP_gsum_subproof() {
    proof.std.gsum.gsum = proof.std.gsum.gsum + subproof.std.gsum.gsum_result;
}

private function PIOP_gsum_proof() {
    check_gsum_was_completed();

    proof.std.gsum.gsum === 0;
}

private function check_gsum_was_completed() {
    for (int index = 0; index < proof.std.gsum.opids_count; index = index + 1) {
        int opid = proof.std.gsum.opids[index];
        use proof.std.gsum.`id${opid}`;
        if (assumes == 0) {
            error(`PIOP #${opid} defined without assume`);
        }
        if (proves == 0) {
            error(`PIOP #${opid} defined without proves`);
        }
    }
}