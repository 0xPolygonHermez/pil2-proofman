require "std_constants.pil";
require "std_sum.pil";
require "std_prod.pil";

const int DEFAULT_PERMUTATION_NAME = PIOP_NAME_PERMUTATION;

int DEFAULT_PERMUTATION_BUS_TYPE = PIOP_BUS_PROD;

function permutation_assumes(const int opid, const expr cols[], const expr sel = 1, int bus_type = PIOP_BUS_DEFAULT, int name = PIOP_NAME_DEFAULT) {
    if (name == PIOP_NAME_DEFAULT) name = DEFAULT_PERMUTATION_NAME;

    if (bus_type == PIOP_BUS_DEFAULT) bus_type = DEFAULT_PERMUTATION_BUS_TYPE;

    switch (bus_type) {
        case PIOP_BUS_SUM:
            sum_assumes(name, opid, cols, sel);
        case PIOP_BUS_PROD:
            prod_assumes(name, opid, cols, sel);
        default:
            error(`Unknown bus type: ${bus_type}`);
    }
}

function permutation_proves(const int opid, const expr cols[], const expr sel = 1, int bus_type = PIOP_BUS_DEFAULT, int name = PIOP_NAME_DEFAULT) {
    if (name == PIOP_NAME_DEFAULT) name = DEFAULT_PERMUTATION_NAME;

    if (bus_type == PIOP_BUS_DEFAULT) bus_type = DEFAULT_PERMUTATION_BUS_TYPE;

    switch (bus_type) {
        case PIOP_BUS_SUM:
            sum_proves(name, opid, cols, sel);
        case PIOP_BUS_PROD:
            prod_proves(name, opid, cols, sel);
        default:
            error(`Unknown bus type: ${bus_type}`);
    }
}

// UPCD: Update Proof Constraint Directly
function permutation_upcd(const int opid, const expr cols[], const expr sel = 1, int bus_type = PIOP_BUS_DEFAULT, int name = PIOP_NAME_DEFAULT) {
    if (name == PIOP_NAME_DEFAULT) name = DEFAULT_PERMUTATION_NAME;

    // It doesn't matter if we do an assume or prove
    if (bus_type == PIOP_BUS_DEFAULT) bus_type = DEFAULT_PERMUTATION_BUS_TYPE;

    switch (bus_type) {
        case PIOP_BUS_SUM:
            sum_proves(name, opid, cols, sel, is_direct: 1);
        case PIOP_BUS_PROD:
            prod_proves(name, opid, cols, sel, is_direct: 1);
        default:
            error(`Unknown bus type: ${bus_type}`);
    }
}
