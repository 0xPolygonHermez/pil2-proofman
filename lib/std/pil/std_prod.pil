require "std_common.pil"

/**
 * Verifies the number of columns of same PIOP check (assumes, proves) is the same.
 * @param opid (unique) identifier of the PIOP check
 * @param type if 1, it is a lookup or a range check; if 0, it is a permutation
 * @param cols_count number of columns of the PIOP check
 * @param proves 1 if proves, 0 if assumes
 */
private function check_gprod_opid_and_cols(int proves, int type, int opid, int cols_count) {

    if (cols_count < 1) {
        error(`The number of columns of PIOP #${opid} must be at least 1 (${cols_count})`);
    }

    container proof.std.gprod alias gprod {
        // FIX: dynamic arrays not ready
        int opids_count = 0;
        int opids[100];
        expr gprod = 1;  // Resulting sum of every subproof and every air.
                        // Declared as expression (unknown at runtime), but used as field element.
    }

    
    container subproof.std.gprod {
        subproofval aggregate(prod) gprod_result;
    }

    container air.std.gprod {
        expr gprod_assumes = 1;
        expr gprod_proves = 1;
    }

    container proof.std.gprod.`id${opid}` alias gprodid {
        int cols;
        int proves = 0;
        int assumes = 0;
        int type = 0;
    }

    if (gprodid.cols == 0) {
        // first time called
        gprodid.cols = cols_count;
        gprodid.type = type;
        // add opid on a list to verify at final
        gprod.opids[gprod.opids_count] = opid;
        gprod.opids_count = gprod.opids_count + 1;
    } else {
        if (gprodid.cols != cols_count) {
            error(`The number of columns of PIOP #${opid} must be ${piopid.cols} but was ${cols_count}`);
        }
        if (gprodid.type != type) {
            error(`The #${opid} was declared previously different type, as ${gprodid.type==1?'permutation':'lookup'}`);
        }
    }

    if (proves) {
        gprodid.proves = gprodid.proves + 1;
    } else {
        gprodid.assumes = gprodid.assumes + 1;
    }
}