require "std_tools.pil";

// Note: When name is "isolated" we don't check if the number of columns is the same for all the PIOPs

function prod_assumes(const int name, const int opid, const expr cols[], const expr sel = 1, int is_direct = 0) {
    update_piop_prod(name, 0, opid, sel, cols, is_direct);
}

function prod_proves(const int name, const int opid, const expr cols[], const expr sel = 1, int is_direct = 0) {
    update_piop_prod(name, 1, opid, sel, cols, is_direct);
}

private function init_containers_prod(int name, int opid) {
    container proof.std.gprod {
        // Used for final checks
        int opids_count = 0;
        int opids[100];

        // Resulting product of every airgroup and every air
        // It is the accumulation of each partial product that each instance 
        // of each air constributes to. It must be zero at the end.
        expr gprod = 1;

        // Direct shortcut to the previous product
        int direct_gprod_assumes_count = 0;
        expr direct_gprod_assumes_sel[100];
        expr direct_gprod_assumes[100];

        int direct_gprod_proves_count = 0;
        expr direct_gprod_proves_sel[100];
        expr direct_gprod_proves[100];
    }

    container airgroup.std.gprod {
        airgroupval aggregate(prod) gprod_result;
    }

    container air.std.gprod {
        int gprod_assumes_count = 0;
        expr gprod_assumes_sel[100];
        expr gprod_assumes[100];

        int gprod_proves_count = 0;
        expr gprod_proves_sel[100];
        expr gprod_proves[100];
    }

    // Container used for final checks
    container proof.std.gprod.`id${opid}` {
        int name = name;
        int cols;
        int proves = 0;
        int assumes = 0;
    }
}

private function initial_checks_prod(int proves, int opid, expr cols[], int is_direct) {
    const int cols_count = length(cols);

    // Assumes and proves of the same opid must have the same number of columns
    if (proof.std.gprod.`id${opid}`.cols == 0) {
        // first time called
        proof.std.gprod.`id${opid}`.cols = cols_count;
        // add opid on a list to verify at final
        proof.std.gprod.opids[proof.std.gprod.opids_count] = opid;
        proof.std.gprod.opids_count++;
    } else if (!is_direct && cols_count != proof.std.gprod.`id${opid}`.cols) {
        const int expected_cols = proof.std.gprod.`id${opid}`.cols;
        error(`The number of columns of PIOP #${opid} must be ${expected_cols} but was ${cols_count}`);
    }

    // The same opid is shared among multiple instances of the same air, so we must keep track of the number of
    // proves and assumes to verify at the end that all of them match
    if (proves) {
        proof.std.gprod.`id${opid}`.proves++;
    } else {
        proof.std.gprod.`id${opid}`.assumes++;
    }
}

/**
 * Given a selector sel and columns C₀,...,Cₙ₋₁, it:
 *      · 1] defines the running grandproduct constraints for each air
 *      · 2] add each airgroupvalue of each airgroup to the running prod
 *      · 3] checks that the overall prod is zero
 * @param name name of the PIOP
 * @param proves boolean indicating if updating a proves or a assumes
 * @param opid (unique) identifier of the PIOP
 * @param sel selector of the PIOP
 * @param cols columns of the PIOP
 */
private function update_piop_prod(int name, int proves, int opid, expr sel, expr cols[], int is_direct = 0) {
    const int cols_count = length(cols);
    if (cols_count < 1) {
        string side = proves ? "proves" : "assumes";
        error(`The number of columns of ${side} #${opid} must be at least 1`);
    }

    init_containers_prod(name, opid);

    initial_checks_prod(proves, opid, cols, is_direct);

    if (!is_direct) {
        // Create debug hints for the witness computation
        const int ncols = length(cols);
        string name_cols[ncols];
        for (int i = 0; i < ncols; i++) {
            name_cols[i] = string(cols[i]);
        }
        @gprod_member_data{name_piop: get_piop_name(name), names: name_cols, opid: opid, proves: proves, selector: sel, references: cols};
    }

    init_challenges();

    // selected vector to simple column reduction
    expr cols_compressed = compress_cols(opid, cols);

    if (is_direct) {
        use proof.std.gprod;

        if (proves) {
            // adding all prods of proves called in this air
            direct_gprod_proves_sel[direct_gprod_proves_count] = sel;
            direct_gprod_proves[direct_gprod_proves_count] = cols_compressed;
            direct_gprod_proves_count++;
        } else {
            // adding all prods of assumes called in this air
            direct_gprod_assumes_sel[direct_gprod_assumes_count] = sel;
            direct_gprod_assumes[direct_gprod_assumes_count] = cols_compressed;
            direct_gprod_assumes_count++;
        }
    } else {
        use air.std.gprod;
        if (proves) {
            // adding all prods of proves called in this air
            gprod_proves_sel[gprod_proves_count] = sel;
            gprod_proves[gprod_proves_count] = cols_compressed;
            gprod_proves_count++;
        } else {
            // adding all prods of assumes called in this air
            gprod_assumes_sel[gprod_assumes_count] = sel;
            gprod_assumes[gprod_assumes_count] = cols_compressed;
            gprod_assumes_count++;
        }

        // define constraints at the air level
        on final air piop_gprod_air();

        // update values at the airgroup level
        on final airgroup piop_gprod_airgroup();

        // at the end, check consistency of all the opids
        on final proof check_opids_were_completed_prod();
    }

    // update constraints at the proof level
    on final proof piop_gprod_proof();
}

/**
 * It defines the constraints for the grandproduct based on the rapidUp protocol https://eprint.iacr.org/2022/1050.pdf
 */
private function piop_gprod_air() {
    use air.std.gprod;

    col witness stage(2) gprod;

    //                                        (st1·(t1+ɣ-1)+1)·(st2·(t2+ɣ-1)+1)
    //  gprod === ('gprod * (1 - L1) + L1) * -----------------------------------
    //                                        (sf1·(f1+ɣ-1)+1)·(sf2·(f2+ɣ-1)+1)
    //
    // Note: The ti and fi are not necessarily related to each other

    col fixed _L1 = [1,0...]; // TODO: Fix

    expr numerator = 1;
    for (int i = 0; i < gprod_proves_count; i++) {
        numerator *= (gprod_proves_sel[i] * (gprod_proves[i] + std_gamma - 1) + 1);
    }

    expr denominator = 1;
    for (int i = 0; i < gprod_assumes_count; i++) {
        denominator *= (gprod_assumes_sel[i] * (gprod_assumes[i] + std_gamma - 1) + 1);
    }

    @gprod_col{reference: gprod, numerator: numerator, denominator: denominator, result: airgroup.std.gprod.gprod_result};

    gprod * denominator === ('gprod * (1 - _L1) + _L1) * numerator;
    _L1' * (gprod - airgroup.std.gprod.gprod_result) === 0;
}

// Note: We don't "update" the prod at the airgroup level (i.e., all the resulting prods generated by each air)
//       because we don't know how many airs will be generated at compile time. Therefore we use the same
//       term to refer to both things: the value generated at each air and the value generated at each airgroup.
//       It is like jumping from the air level to the proof (global) level, from the constraint point of view.

/**
 * It updates the expression for the grandprod at the proof level indirectly with the airgroup values
 */
private function piop_gprod_airgroup() {
    proof.std.gprod.gprod *= airgroup.std.gprod.gprod_result;
}

/**
 * It defines the constraints for the grandprod at the proof level
 */
private function piop_gprod_proof() {
    //
    //  gprod · f(s_1·(e_1 - 1) + 1) · f(s_2·(e_2 - 1) + 1) · f(s_3·(e_3 - 1) + 1) === 1
    //                      
    // where:
    // f(x) =  x  if the i-th term is a prove,
    // f(x) = 1/x if the i-th term is an assume,
    // s_i = sel_i,
    // e_i = t_i + ɣ,
    //
    // Assuming that i=2 is the only assume, we can rewrite it as:
    //      gprod·(s_1·(e_1 - 1) + 1)·(s_3·(e_3 - 1) + 1)·(s_3·(e_3 - 1) + 1) === (s_2·(e_2 - 1) + 1)
    //
    // Note: We cannot update this constraint directly if some of the elements
    //       are not globally defined: constants, public inputs, airgroupvalues, ...

    use proof.std.gprod;

    expr numerator = 1;
    for (int i = 0; i < direct_gprod_proves_count; i++) {
        numerator *= (direct_gprod_proves_sel[i] * (direct_gprod_proves[i] + std_gamma - 1) + 1);
    }

    expr denominator = 1;
    for (int i = 0; i < direct_gprod_assumes_count; i++) {
        denominator *= (direct_gprod_assumes_sel[i] * (direct_gprod_assumes[i] + std_gamma - 1) + 1);
    }

    gprod * numerator === denominator;
}

/**
 * It checks that all the assumes and proves of the same opid have been defined
 * @param name name of the PIOP
 */
private function check_opids_were_completed_prod() {
    for (int index = 0; index < proof.std.gprod.opids_count; index++) {
        int opid = proof.std.gprod.opids[index];
        use proof.std.gprod.`id${opid}`;

        if (name == PIOP_NAME_ISOLATED) continue;

        const string name_str = get_piop_name(name);

        if (assumes == 0) {
            error(`${name_str} #${opid} defined without assume`);
        } else if (proves == 0) {
            error(`${name_str} #${opid} defined without proves`);
        }
    }
}