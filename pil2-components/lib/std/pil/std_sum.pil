require "std_constants.pil";
require "std_tools.pil";

// TODO: Parametrize with the maximum constraint degree instead of assuming it is 3

const int SUM_TYPE_ASSUMES = 0;
const int SUM_TYPE_PROVES = 1;
const int SUM_TYPE_FREE = 2;

// Control how the expressions are grouped
int SUM_EXPRESSIONS_IM_NON_REDUCED = 0; // Set to -1 to non-reduce all the terms

function sum_set_expressions_im_non_reduced(const int num) {
    if (num < -1) {
        error(`The non-reduced value must be at least -1, but received ${num}`);
    }

    SUM_EXPRESSIONS_IM_NON_REDUCED = num;
}

// Control how the airvals are grouped
int SUM_AIRVALS_IM_NON_REDUCED = 0; // Set to -1 to non-reduce all the terms
int SUM_AIRVALS_IM_REDUCE_FACTOR = 1;

function sum_set_airvals_im_non_reduced(const int num) {
    if (num < -1) {
        error(`The non-reduced value must be at least -1, but received ${num}`);
    }

    SUM_AIRVALS_IM_NON_REDUCED = num;
}

function sum_set_airvals_im_reduce_factor(const int factor) {
    if (factor < 1) {
        error(`The factor must be at least 1, but received ${factor}`);
    }

    SUM_AIRVALS_IM_REDUCE_FACTOR = factor;
}

function sum(const int name, const int type, const int opids[], const expr busid, const expr expressions[], const expr mul = 1, const int direct_type = PIOP_DIRECT_TYPE_DEFAULT) {
    assert(type == SUM_TYPE_ASSUMES || type == SUM_TYPE_PROVES || type == SUM_TYPE_FREE);
    update_piop_sum(name, type, opids, busid, mul, expressions, direct_type);
}

function sum_assumes(const int name, const int opids[], const expr busid, const expr expressions[], const expr sel = 1, const int direct_type = PIOP_DIRECT_TYPE_DEFAULT) {
    sum(name, 0, opids, busid, expressions, sel, direct_type);
}

function sum_proves(const int name, const int opids[], const expr busid, const expr expressions[], const expr mul = 1, const int direct_type = PIOP_DIRECT_TYPE_DEFAULT) {
    sum(name, 1, opids, busid, expressions, mul, direct_type);
}

/**
 * It updates the sum check constraints.
 *
 * @param name        The name of the PIOP consuming the sum check
 * @param type        The type of the PIOP
 * @param opids       The vector of opids of the PIOP
 * @param busid       The ID that uniquely identifies the PIOP in the bus
 * @param sel         The selector of the PIOP
 * @param expressions The vector of expressions of the PIOP
 * @param direct_type Defines wheter the update has to be done at the global, air or default level
 */
private function update_piop_sum(const int name, const int type, const int opids[], const expr busid, const expr sel, const expr expressions[], const int direct_type = PIOP_DIRECT_TYPE_DEFAULT) {
    const string name_str = get_piop_name(name);
    const int exprs_num = length(expressions);
    if (exprs_num < 1) {
        error(`The number of expressions of ${name_str} #${opid} must be at least 1`);
    }

    init_proof_containers_sum(name, opids);

    if (direct_type == PIOP_DIRECT_TYPE_AIR || direct_type == PIOP_DIRECT_TYPE_DEFAULT) {
        init_air_containers_sum();
    }

    // Create debug hints for the witness computation
    string name_expr[exprs_num];
    expr sum_expr = 0;
    for (int i = 0; i < exprs_num; i++) {
        name_expr[i] = string(expressions[i]);
        sum_expr += expressions[i];
    }

    // TODO: Redo when ternary operator works properly over expressions
    expr type_hint;
    if (type == SUM_TYPE_FREE) {
        type_hint = sel;
    } else {
        type_hint = type;
    }
    @gsum_debug_data{name_piop: get_piop_name(name), name_expr: name_expr, busid: busid, is_global: direct_type == PIOP_DIRECT_TYPE_GLOBAL,
                          type: type_hint, selector: sel, expressions: expressions, deg_expr: degree(sum_expr), deg_sel: degree(sel)};

    initial_checks_sum(name_str, type, opids, exprs_num, direct_type);

    // selected vector to simple expression reduction
    expr exprs_compressed = compress_exprs(busid, expressions);

    switch (direct_type) {
        case PIOP_DIRECT_TYPE_GLOBAL:
            if (STD_MODE == STD_MODE_ONE_INSTANCE) {
                error("Updating the global constraint is not allowed in one instance mode");
            }

            gsum_update_global_constraint_data(type, sel, exprs_compressed);
        case PIOP_DIRECT_TYPE_AIR, PIOP_DIRECT_TYPE_DEFAULT:
            gsum_update_air_constraint_data(type, sel, exprs_compressed, direct_type);

            // Update constraints at the air level
            on final air piop_gsum_air();

            // Update the constraints at the airgroup level
            if (STD_MODE != STD_MODE_ONE_INSTANCE) {
                on final airgroup piop_gsum_airgroup();
            }
        default:
            error(`Invalid direct_type: ${direct_type}`);
    }

    // Update the constraints at the proof level
    if (STD_MODE != STD_MODE_ONE_INSTANCE) {
        on final proof piop_gsum_proof();
    }

    // At the end, check consistency of all the opids
    on final proof check_opids_were_completed_sum();

    // Generate global hints
    on final proof piop_gsum_issue_global_hints(); 
}

private function init_proof_containers_sum(const int name, const int opids[]) {
    container proof.std.gsum {
        // Used for final checks
        int opids_count = 0;
        int opids[ARRAY_SIZE];

        // Resulting sum of every airgroup and every air
        // It is the accumulation of each partial sum that each air 
        // constributes to.
        expr gsum = 0;

        // Direct-related data, used to update `gsum` at the proof level
        int direct_gsum_nargs = 0;
        expr direct_gsum_s[ARRAY_SIZE];
        expr direct_gsum_e[ARRAY_SIZE];

        // For global hints
        int air_count = 0;
        int airgroup_ids[ARRAY_SIZE];
        int air_ids[ARRAY_SIZE];
        int std_mode[ARRAY_SIZE];
    }

    // Opid-specific data
    // It must be defined at the proof level because the same opid can appear in different airs
    for (int i = 0; i < length(opids); i++) {
        container proof.std.gsum.`id${opids[i]}` {
            int name = name;
            int expressions;
            int proves = 0;
            int assumes = 0;
        }
    }
}

private function init_air_containers_sum() {
    // AIR-specific data
    container air.std.gsum {
        int gsum_nargs = 0;
        expr gsum_s[ARRAY_SIZE];
        expr gsum_e[ARRAY_SIZE];

        // Direct-related data, used to update `gsum` at the air level
        int direct_gsum_nargs = 0;
        expr direct_gsum_s[ARRAY_SIZE];
        expr direct_gsum_e[ARRAY_SIZE];
    }
}

private function initial_checks_sum(const string name, const int type, const int opids[], const int exprs_num, const int direct_type) {
    for (int i = 0; i < length(opids); i++) {
        // Assumes and proves of the same opid must have the same number of expressions
        if (proof.std.gsum.`id${opids[i]}`.expressions == 0) {
            // The first time we see this opid, we store the number of expressions
            proof.std.gsum.`id${opids[i]}`.expressions = exprs_num;

            // Store the opid to check at the end that all the opids have been completed
            proof.std.gsum.opids[proof.std.gsum.opids_count] = opids[i];
            proof.std.gsum.opids_count++;
        } else if (exprs_num != proof.std.gsum.`id${opids[i]}`.expressions) {
            // If this is not the first time we see this opid, we check that the number of expressions is the same
            const int expected_exprs = proof.std.gsum.`id${opids[i]}`.expressions;
            error(`The number of expressions of ${name} #${opids[i]} must be ${expected_exprs} but was ${exprs_num}`);
        }

        // The same opid can appear in different airs, so we keep track of the number of proves and assumes
        // for final checks
        if (type == SUM_TYPE_FREE) {
            // If the user is responsible for the use of proves and assumes, then mark both
            proof.std.gsum.`id${opids[i]}`.proves++;
            proof.std.gsum.`id${opids[i]}`.assumes++;
        } else {
            // Otherwise, we mark it correctly
            string is_proves_str;
            if (type == SUM_TYPE_PROVES) {
                is_proves_str = "proves";
            } else {
                is_proves_str = "assumes";
            }
            proof.std.gsum.`id${opids[i]}`.`${is_proves_str}`++;
        }
    }
}

private function gsum_update_global_constraint_data(const int type, const expr sel, const expr exprs) {
    use proof.std.gsum;

    if ((type == SUM_TYPE_PROVES) || (type == SUM_TYPE_FREE)) {
        direct_gsum_s[direct_gsum_nargs] = sel;
    } else {
        direct_gsum_s[direct_gsum_nargs] = 0 - sel;
    }
    direct_gsum_e[direct_gsum_nargs] = exprs;
    direct_gsum_nargs++;
}

private function gsum_update_air_constraint_data(const int type, const expr sel, const expr exprs, const int direct_type) {
    use air.std.gsum;

    if (direct_type == PIOP_DIRECT_TYPE_AIR) {
        if ((type == SUM_TYPE_PROVES) || (type == SUM_TYPE_FREE)) {
            direct_gsum_s[direct_gsum_nargs] = sel;
        } else {
            direct_gsum_s[direct_gsum_nargs] = 0 - sel;
        }
        direct_gsum_e[direct_gsum_nargs] = exprs;
        direct_gsum_nargs++;
    } else {
        if ((type == SUM_TYPE_PROVES) || (type == SUM_TYPE_FREE)) {
            gsum_s[gsum_nargs] = sel;
        } else {
            gsum_s[gsum_nargs] = 0 - sel;
        }
        gsum_e[gsum_nargs] = exprs;
        gsum_nargs++;
    }
}

// Deferred functions
private function piop_gsum_air() {
    use air.std.gsum;

    const expr L1 = get_L1(); // [1,0,...]

    col witness stage(2) gsum;

    if (STD_MODE != STD_MODE_ONE_INSTANCE) {
        airgroupval aggregate(sum) default(0) gsum_result;
    }

    /*
                                          selᵢ
        gsum === 'gsum * (1 - L1) + ∑ᵢ --------
                                         fᵢ + ɣ

        We transform some of the rational constraint to a polynomial one by 
        substituting all the rational terms by individual terms (except for one to optimize):
            gsum === 'gsum * (1 - L1) + ∑ⱼ imⱼ + num / den
    */

    if (!defined(std_gamma)) {
        challenge stage(2) std_gamma;
    }

    // Generate hints for the optimizer
    string constraint = "LHS === RHS1 + ";
    for (int i = 0; i < gsum_nargs; i++) {
        if (i == gsum_nargs - 1) {
            constraint += `frac[${i}]`;
        } else {
            constraint += `frac[${i}] + `;
        }
    }
    @sum_optimizer{name: "constraint", expression: constraint};

    @sum_optimizer{name: "LHS", expression: gsum};

    const expr rhs1 = 'gsum * (1 - L1);
    @sum_optimizer{name: "RHS1", expression: rhs1};

    for (int i = 0; i < gsum_nargs; i++) {
        const expr numerator = gsum_s[i];
        const expr denominator = gsum_e[i] + std_gamma;
        @sum_optimizer{name: `frac[${i}]`, numerator: numerator, denominator: denominator};
    }

    // Start with the reduction
    expr num = 0;
    expr den = 1;
    expr sum_ims = 0;
    // Compute the number of terms that are not reduced
    int num_non_reduced = SUM_EXPRESSIONS_IM_NON_REDUCED;
    if ((SUM_EXPRESSIONS_IM_NON_REDUCED == -1) || (gsum_nargs < SUM_EXPRESSIONS_IM_NON_REDUCED)) {
        num_non_reduced = gsum_nargs;
    }

    // The first num_non_reduced terms are not reduced
    for (int i = 0; i < num_non_reduced; i++) {
        den *= (gsum_e[i] + std_gamma);

        expr _tmp = gsum_s[i];
        for (int j = 0; j < num_non_reduced; j++) {
            if (j != i) _tmp *= (gsum_e[j] + std_gamma);
        }
        num += _tmp;
    }

    // The rest of the terms are grouped in clusters of size MAX_CONSTRAINT_DEGREE-1
    const int num_terms = gsum_nargs - num_non_reduced;
    if (num_terms > 0) {
        // Identify isolated terms of specific degrees
        int isolated_term = -1;
        for (int i = num_non_reduced; i < gsum_nargs; i++) {
            const int gsum_s_degree = degree(gsum_s[i]);
            const int gsum_e_degree = degree(gsum_e[i]);
            if ((gsum_s_degree == 3 && gsum_e_degree == 1) ||
                (gsum_s_degree == 2 && gsum_e_degree == 1)) 
            {
                isolated_term = i;
                break;
            } 
        }

        // Identify the rest
        int low_degree_term[num_terms];
        int high_degree_term[num_terms];
        int low_degree_len = 0;
        int high_degree_len = 0;
        for (int i = num_non_reduced; i < gsum_nargs; i++) {
            // If the isolated term has already been identified, continue
            if (i == isolated_term) {
                continue;
            }

            const int gsum_s_degree = degree(gsum_s[i]);
            const int gsum_e_degree = degree(gsum_e[i]);

            if (gsum_s_degree == 0 && gsum_e_degree == 0)
            {
                // In the case that both the numerator and the denominator are constants, 
                // we can directly add them through the direct terms
                direct_gsum_s[direct_gsum_nargs] = gsum_s[i];
                direct_gsum_e[direct_gsum_nargs] = gsum_e[i];
                direct_gsum_nargs++;
            } 
            else if (gsum_s_degree > 2 || gsum_e_degree > 1) 
            {
                // Track high-degree terms
                high_degree_term[high_degree_len] = i;
                high_degree_len++;
            } 
            else 
            {
                // Handle low-degree terms
                if (isolated_term == -1) {
                    // If the isolated term has not been identified, assign
                    isolated_term = i;
                } else {
                    // Otherwise, add it to the low-degree terms
                    low_degree_term[low_degree_len] = i;
                    low_degree_len++;
                }
            }
        }

        // Create an intermediate for clusters of low-degree terms so that
        // the degree of the constraint is lower than the maximum allowed
        if (low_degree_len > 0) {
            const int nIm = low_degree_len/(MAX_CONSTRAINT_DEGREE-1);
            if (nIm > 0) {
                col witness stage(2) im[nIm];
                for (int i = 0; i < nIm; i++) {

                    //              s[3*i]            s[3*i+1]            s[3*i+2]
                    // im[i] = --------------- + ----------------- + -----------------
                    //           e[3*i] + ɣ         e[3*i+1] + ɣ       e[3*i+2] + ɣ

                    expr prods = 1;
                    expr sums = 0;
                    const int factor_offset = (MAX_CONSTRAINT_DEGREE-1) * i;
                    for (int j = 0; j < (MAX_CONSTRAINT_DEGREE-1); j++) {
                        prods *= (gsum_e[low_degree_term[factor_offset + j]] + std_gamma);

                        expr _partial = gsum_s[low_degree_term[factor_offset + j]];
                        for (int k = 0; k < (MAX_CONSTRAINT_DEGREE-1); k++) {
                            if (k != j) _partial *= (gsum_e[low_degree_term[factor_offset + k]] + std_gamma);
                        }
                        sums += _partial;
                    }
                    @im_col{reference: im[i], numerator: sums, denominator: prods};

                    // im[i] * t[3*i] * t[3*i+1] * t[3*i+2] ===
                    //                    mul[3*i]*t[3*i+1]*t[3*i+2] + mul[3*i+1]*t[3*i]*t[3*i+2] + mul[3*i+2]*t[3*i]*t[3*i+1];
                    im[i] * prods === sums;

                    sum_ims += im[i];
                }
            }

            const int nRemTerms = low_degree_len % (MAX_CONSTRAINT_DEGREE-1);
            // If there are remaining terms, add an extra cluster
            if (nRemTerms > 0) {
                col witness stage(2) im_extra;

                expr prods = 1;
                expr sums = 0;
                const int low_degree_offset = (MAX_CONSTRAINT_DEGREE-1) * nIm;
                for (int j = 0; j < nRemTerms; j++) {
                    prods *= (gsum_e[low_degree_term[low_degree_offset + j]] + std_gamma);

                    expr _partial = gsum_s[low_degree_term[low_degree_offset + j]];
                    for (int k = 0; k < nRemTerms; k++) {
                        if (k != j) _partial *= (gsum_e[low_degree_term[low_degree_offset + k]] + std_gamma);
                    }
                    sums += _partial;
                }
                @im_col{reference: im_extra, numerator: sums, denominator: prods};

                im_extra * prods === sums;

                sum_ims += im_extra;
            }
        }

        // Create a single intermediate for all the high-degree terms
        if (high_degree_len > 0) {
            /*
                        s[i]   
            im[i] = ----------
                     e[i] + ɣ  
            */
            col witness stage(2) im_high_degree[high_degree_len];

            for (int i = 0; i < high_degree_len; i++) {
                const int index = high_degree_term[i];

                @im_col{reference: im_high_degree[i], numerator: gsum_s[index], denominator: gsum_e[index] + std_gamma};

                im_high_degree[i] * (gsum_e[index] + std_gamma) === gsum_s[index];

                sum_ims += im_high_degree[i];
            }
        }

        // Compute the isolated term numerator and denominator
        if (isolated_term != -1) {
            den *= (gsum_e[isolated_term] + std_gamma);

            expr _tmp = gsum_s[isolated_term];
            for (int j = 0; j < num_non_reduced; j++) {
                _tmp *= (gsum_e[j] + std_gamma);
            }
            num += _tmp;
        }
    }

    //  At this point, the constraint has been transformed to:
    //       gsum === 'gsum * (1 - L1) + ∑ⱼ imⱼ + num / den
    //  check that the constraint is satisfied
    (gsum - 'gsum * (1 - L1) - sum_ims) * den - num === 0;

    /*
    At the very last row, it should be satisfied that:
                                     selᵢ
        gsum_result === gsum + ∑ᵢ --------
                                    fᵢ + ɣ
    where both selᵢ and fᵢ are field elements, for all ᵢ.

    We also transform some of the rational constraint to a polynomial one by 
    substituting all the rational terms by individual terms:
          gsum_result === gsum + ∑ⱼ imⱼ
    */

    // Compute the direct terms numerator and denominator
    expr direct_num = 0;
    expr direct_den = 1;
    expr direct_sum_ims = 0;
    if (direct_gsum_nargs > 0) {
        int num_non_reduced = SUM_AIRVALS_IM_NON_REDUCED;
        if ((SUM_AIRVALS_IM_NON_REDUCED == -1) || (direct_gsum_nargs < SUM_AIRVALS_IM_NON_REDUCED)) {
            num_non_reduced = direct_gsum_nargs;
        }

        // The first num_non_reduced terms are not reduced
        for (int i = 0; i < num_non_reduced; i++) {
            direct_den *= (direct_gsum_e[i] + std_gamma);

            expr _tmp = direct_gsum_s[i];
            for (int j = 0; j < num_non_reduced; j++) {
                if (j != i) _tmp *= (direct_gsum_e[j] + std_gamma);
            }
            direct_num += _tmp;
        }

        // The rest of the terms are grouped in clusters of size SUM_AIRVALS_IM_REDUCE_FACTOR
        const int num_terms = direct_gsum_nargs - num_non_reduced;
        if (num_terms > 0) {
            const int initial_offset = num_non_reduced;
            const int num_im = num_terms/SUM_AIRVALS_IM_REDUCE_FACTOR;
            if (num_im > 0) {
                airval stage(2) im_direct[num_im];
                for (int i = 0; i < num_im; i++) {
                    //              s[3*i]            s[3*i+1]            s[3*i+2]
                    // im[i] = --------------- + ----------------- + -----------------
                    //              e[3*i]            e[3*i+1]            e[3*i+2]

                    expr prods = 1;
                    expr sums = 0;
                    const int factor_offset = SUM_AIRVALS_IM_REDUCE_FACTOR * i;
                    for (int j = 0; j < SUM_AIRVALS_IM_REDUCE_FACTOR; j++) {
                        prods *= (direct_gsum_e[initial_offset + factor_offset + j] + std_gamma);

                        expr _partial = direct_gsum_s[initial_offset + factor_offset + j];
                        for (int k = 0; k < SUM_AIRVALS_IM_REDUCE_FACTOR; k++) {
                            if (k != j) _partial *= (direct_gsum_e[initial_offset + factor_offset + k] + std_gamma);
                        }
                        sums += _partial;
                    }
                    @im_airval{reference: im_direct[i], numerator: sums, denominator: prods};

                    // im[i] * t[3*i] * t[3*i+1] * t[3*i+2] ===
                    //                    mul[3*i]*t[3*i+1]*t[3*i+2] + mul[3*i+1]*t[3*i]*t[3*i+2] + mul[3*i+2]*t[3*i]*t[3*i+1];
                    im_direct[i] * prods === sums;

                    direct_sum_ims += im_direct[i];
                }
            }

            // If there are remaining terms, add an extra cluster
            const int num_rem_terms = num_terms % SUM_AIRVALS_IM_REDUCE_FACTOR;
            if (num_rem_terms > 0) {
                airval stage(2) im_direct_extra;

                expr prods = 1;
                expr sums = 0;
                const int offset = initial_offset + SUM_AIRVALS_IM_REDUCE_FACTOR * num_im;
                for (int j = 0; j < num_rem_terms; j++) {
                    prods *= (direct_gsum_e[offset + j] + std_gamma);

                    expr _partial = direct_gsum_s[offset + j];
                    for (int k = 0; k < num_rem_terms; k++) {
                        if (k != j) _partial *= (direct_gsum_e[offset + k] + std_gamma);
                    }
                    sums += _partial;
                }
                @im_airval{reference: im_direct_extra, numerator: sums, denominator: prods};

                im_direct_extra * prods === sums;

                direct_sum_ims += im_direct_extra;
            }
        }
    }

    expr result;
    if (STD_MODE == STD_MODE_ONE_INSTANCE) {
        result = 0;
    } else {
        result = gsum_result;
    }
    @gsum_col{reference: gsum, numerator_air: sum_ims * den + num, denominator_air: den, 
                               numerator_direct: direct_sum_ims * direct_den + direct_num, denominator_direct: direct_den, result: result};
    L1' * ((result - gsum - direct_sum_ims) * direct_den - direct_num) === 0;

    // Store the airgroup and air ids for global hints
    proof.std.gsum.airgroup_ids[proof.std.gsum.air_count] = AIRGROUP_ID;
    proof.std.gsum.air_ids[proof.std.gsum.air_count] = AIR_ID;
    proof.std.gsum.std_mode[proof.std.gsum.air_count] = STD_MODE;
    proof.std.gsum.air_count++;
}

// Note: We don't "update" the sum at the airgroup level (i.e., all the resulting sums generated by each air)
//       because we don't know how many airs will be generated at compile time. Therefore we use the same
//       term to refer to both things: the value generated at each air and the value generated at each airgroup.
//       It is like jumping from the air level to the proof (global) level, from the constraint point of view.

private function piop_gsum_airgroup() {
    // The `gsum_result` from each airgroup is added to the overall global sum
    proof.std.gsum.gsum += gsum_result;
}

private function piop_gsum_proof() {
    use proof.std.gsum;

    //           s_1        s_2          s_3
    // gsum + -------- + --------- + ---------- === 0
    //           e_1        e_2          e_3
    // where:
    // s_i = mul_i  if the i-th term is a prove,
    // s_i = -sel_i if the i-th term is an assume,
    // e_i = (t_i + ɣ) if the i-th term is a prove,
    // e_i = (f_i + ɣ) if the i-th term is an assume,
    //
    // We rewrite it as:
    //      gsum·e_1·e_2·e_3 + s_1·e_2·e_3  + s_2·e_1·e_3 + s_3·e_1·e_2 === 0
    //
    // Note: We cannot update this constraint directly if some of the elements
    //       are not globally defined: constants, public inputs, airgroupvalues, ...

    expr global_num = 0;
    expr global_den = 1;
    for (int i = 0; i < direct_gsum_nargs; i++) {
        global_den *= (direct_gsum_e[i] + std_gamma);

        expr _tmp = direct_gsum_s[i];
        for (int j = 0; j < direct_gsum_nargs; j++) {
            if (j != i) _tmp *= (direct_gsum_e[j] + std_gamma);
        }
        global_num += _tmp;
    }

    gsum * global_den + global_num === 0;
}

private function check_opids_were_completed_sum() {
    for (int i = 0; i < proof.std.gsum.opids_count; i++) {
        int opid = proof.std.gsum.opids[i];
        use proof.std.gsum.`id${opid}`;

        // If the PIOP is isolated, avoid any check
        if (name == PIOP_NAME_ISOLATED) continue;

        const string name_str = get_piop_name(name);

        // At least one assume and one prove must be defined
        if (assumes == 0) {
            error(`${name_str} #${opid} defined without assume`);
        } else if (proves == 0) {
            error(`${name_str} #${opid} defined without proves`);
        }
    }
}

private function piop_gsum_issue_global_hints() {
    use proof.std.gsum;
    @std_sum_users{num_users: air_count, std_mode: std_mode, airgroup_ids: airgroup_ids, air_ids: air_ids, stage_wc: 2};
}