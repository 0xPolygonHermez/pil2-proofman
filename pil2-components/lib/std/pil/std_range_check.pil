require "std_constants.pil";
require "std_lookup.pil";

// TODO: Improve specified_ranges division, so that it does not create a new multiplicity
// for each opid, but instead fills the N up until the end
// Problem: I need to create an additional fixed because multiple OPIDS will coexist in the same slice


// TODO: Function that isolates particular ranges, instead of parameter.
// Everything is in a single table by default.

/*
 * Module for performing selected range checks over expressions of any degree.
 * This module provides three independent user interfaces:
 *
 * 1. **Direct Call**:
 *    Perform a range check directly with specified parameters.
 *    Example:
 *        // Check if values in `expression` fall within the range [0, 255] (U8) using a predefined range.
 *        range_check(expression, 0, 255, sel, true);
 *
 *        // Check if values in `expression` fall within the range [100, 500], without using a predefined range.
 *        range_check(expression, 100, 500, sel, false);
 *
 * 2. **Multi-Range Check**:
 *    Perform a range check across two ranges based on a range selector.
 *    Example:
 *        // Check if values in `expression` fall within [0, 255] when `range_sel = 1`,
 *        // or within [256, 512] when `range_sel = 0`.
 *        multi_range_check(expression, 0, 255, 256, 512, range_sel, sel, false);
 *
 * 3. **Dynamic Range Check**:
 *    First, obtain an ID for the range, then perform the range check using a user-defined range selector.
 *    Example:
 *        // Step 1: Obtain IDs for the desired ranges.
 *        int id_range_24 = range_check_id(0, 2**24-1);  // Range [0, 2^24-1]
 *        int id_range_16 = range_check_id(0, 2**16-1);  // Range [0, 2^16-1]
 *        int id_range_15 = range_check_id(0, 2**15-1);  // Range [0, 2^15-1]
 *
 *        // Step 2: Perform range checks dynamically using a user-defined range selector.
 *        col witness sel_8, sel_16, sel_32;
 *        range_check_dynamic(expression, id_range_24 * sel_8 + id_range_16 * sel_16 + id_range_15 * sel_32);
 *
 * **Parameter Details**:
 * - `predefined`: A flag indicating whether predefined ranges should be used.
 *   The predefined ranges currently supported are:
 *      - U8: [0..255]
 *      - U16: [0..65535]
 *
 * **Implementation Notes**:
 * - All range checks are internally reduced to a lookup check, implemented using the logup protocol.
 *   For more details, refer to: https://eprint.iacr.org/2022/1530.
 * - This protocol is optimized for repeated lookups within the same range rather than across different ranges.
 * - To improve performance, the module attempts to "absorb" custom ranges into predefined ranges whenever possible.
 */

const int MAX_RANGE_LEN = (PRIME - 1) / 2;

int U8_TABLE_VIRTUAL = 0;
int U16_TABLE_VIRTUAL = 0;
int SPECIFIED_TABLE_VIRTUAL = 0;

function set_u8_table_virtual() {
    U8_TABLE_VIRTUAL = 1;
}

function set_u16_table_virtual() {
    U16_TABLE_VIRTUAL = 1;
}

function set_specified_table_virtual() {
    SPECIFIED_TABLE_VIRTUAL = 1;
}

function set_range_check_tables_virtual() {
    set_u8_table_virtual();
    set_u16_table_virtual();
    set_specified_table_virtual();
}

int MAX_U8_BITS = 8;
int MAX_U16_BITS = 16;
int MAX_SPECIFIED_BITS = -1; // -1 indicates that the bits is specified on demand
                             // and is set to be the maximum of all specified ranges

function set_max_u8_bits(const int bits) {
    if (bits < 1 || bits > 8) {
        error(`The u8 bits should be between 1 and 8, got ${bits} instead`);
    }

    MAX_U8_BITS = bits;
}

function set_max_u16_bits(const int bits) {
    if (bits < 1 || bits > 16) {
        error(`The u16 bits should be between 1 and 16, got ${bits} instead`);
    }

    MAX_U16_BITS = bits;
}

function set_max_specified_bits(const int bits) {
    if (bits < 1) {
        error(`The specified bits should be greater than or equal to 1, got ${bits} instead`);
    }

    MAX_SPECIFIED_BITS = bits;
}

function set_max_std_tables_bits(const int bits) {
    if (bits < 1) {
        error(`The input bits should be greater than or equal to 1, got ${bits} instead`);
    }

    set_max_u8_bits(bits > 8 ? 8 : bits);
    set_max_u16_bits(bits > 16 ? 16 : bits);
    set_max_specified_bits(bits);
}

const int U8AIR_OPID = 100;
const int U16AIR_OPID = 101;

int last_assigned_opid = U16AIR_OPID;
private function next_available_opid(): int {
    last_assigned_opid++;
    return last_assigned_opid;
}

private function get_opid(const int min, const int max, const int predefined): int {
    if (predefined && min >= 0) {
        if (max <= MASK_8) {
            return U8AIR_OPID;
        } else if (max <= MASK_16) {
            return U16AIR_OPID;
        }
    }

    return next_available_opid();
}

airtemplate U8Air(const int N = 2**8) {
    // Divide the range [0,MASK_8] into P2_8/N ranges [0,N-1], [N,2N-1], ..., [P2_8-N,MASK_8]
    const int col_num = P2_8 / N;
    col fixed RANGE[col_num];
    col witness mul[col_num];
    for (int i = 0; i < col_num; i++) {
        const int min = i * N;
        const int max = (i + 1) * N - 1;

        RANGE[i] = [min..max-1,max...];

        lookup_proves(U8AIR_OPID, [RANGE[i]], mul[i], PIOP_NAME_RANGE_CHECK);
    }

    if (U8_TABLE_VIRTUAL == 0) {
        proof.std.u8.airgroup_id = AIRGROUP_ID;
        proof.std.u8.air_id = AIR_ID;
    }
}

airtemplate U16Air(const int N = 2**16) {
    // Divide the range [0,MASK_16] to P2_16/N ranges [0,N-1], [N,2N-1], ..., [P2_16-N,MASK_16]
    const int col_num = P2_16 / N;
    col fixed RANGE[col_num];
    col witness mul[col_num];
    for (int i = 0; i < col_num; i++) {
        const int min = i * N;
        const int max = (i + 1) * N - 1;

        RANGE[i] = [min..max-1,max...];

        lookup_proves(U16AIR_OPID, [RANGE[i]], mul[i], PIOP_NAME_RANGE_CHECK);
    }

    if (U16_TABLE_VIRTUAL == 0) {
        proof.std.u16.airgroup_id = AIRGROUP_ID;
        proof.std.u16.air_id = AIR_ID;
    }
}

airtemplate SpecifiedRanges(const int N, const int opids[], const int opids_count, const int init_mins[], const int init_maxs[]) {
    // Compute the number of columns needed
    int col_num = 0;
    int opids_len[opids_count];
    int init_mins_neg[opids_count];
    for (int i = 0; i < opids_count; i++) {
        // Divide the range [min,max] to n ranges [min,min+N-1], [min+N,min+2N-1], ..., [min+(n-1)N,max]
        const int min = init_mins[i];
        const int max = init_maxs[i];
        const int range_size = max - min + 1;
        const int divisions = (range_size + N - 1) / N;
        opids_len[i] = divisions;
        col_num += divisions;

        // Since everything is mapped back to a field element, I need to know whether the range is negative
        init_mins_neg[i] = (min < 0) ? 1 : 0;
    }

    @specified_ranges_data{col_num: col_num, mins: init_mins, mins_neg: init_mins_neg, opids_count: opids_count, opids_len: opids_len};

    col fixed RANGE[col_num];
    col witness mul[col_num];
    int offset = 0;
    for (int i = 0; i < opids_count; i++) {
        const int opid = opids[i];
        const int min = init_mins[i];
        const int max = init_maxs[i];

        const int opid_len = opids_len[i];
        for (int j = 0; j < opid_len; j++) {
            const int idx = offset + j;
            const int min_part = min + j * N;
            const int max_part = (j == opid_len - 1) ? max : min + (j + 1) * N - 1;

            if (min == max) {
                RANGE[idx] = [min_part...];
            } else {
                RANGE[idx] = [min_part..max_part-1,max_part...];
            }
            lookup_proves(opid, [RANGE[idx]], mul[idx], PIOP_NAME_RANGE_CHECK);
        }
        offset += opid_len;
    }

    if (SPECIFIED_TABLE_VIRTUAL == 0) {
        proof.std.specified.airgroup_id = AIRGROUP_ID;
        proof.std.specified.air_id = AIR_ID;
    }
}

// airtemplate RangeCheckTable() {
// }

/**
 * Performs a range check on a expression within a specified range.
 *
 * @param expression The expression to be range checked.
 * @param min        The minimum value of the range (inclusive).
 * @param max        The maximum value of the range (inclusive).
 * @param sel        A selector specifying which rows are subject to the range check.
 * @param predefined A flag indicating whether to use predefined ranges.
 *
 * @note If `predefined` is true, the provided range [min, max] may be overridden
 *       by one of the predefined ranges, such as:
 *       - U8: [0, 255]
 *       - U16: [0, 65535]
 */
function range_check(const expr expression, const int min, const int max, const expr sel = 1, const int predefined = 0) {
    range_validator(min, max);

    // Check if the range can be absorbed into the predefined ranges
    const int absorb = predefined && min >= 0 && max <= MASK_16;

    const int opid = opid_process(min, max, predefined, absorb);

    if (predefined && !absorb) {
        println(`The range [${min},${max}] cannot be absorbed into any predefined range. The range will be treated as a specified range.`);
        println("Available predefined ranges:");
        println(` -  U8: [0, ${MASK_8}]`);
        println(` - U16: [0, ${MASK_16}]`);
    }

    // TODOOOO
    // If the range already exists or it is included in an already existing range, reuse
    // lookup_assumes(opid, [expression], sel, PIOP_NAME_RANGE_CHECK);


    // Define the range check assumes
    if (absorb) {
        if (min == 0 && (max == MASK_8 || max == MASK_16)) {
            const int is_u8 = (max == MASK_8) ? 1 : 0;

            @range_def{opid: opid, predefined: predefined, min: min, max: max, 
                       min_neg: 0, max_neg: 0, 
                       type: is_u8 ? "U8" : "U16", is_virtual: is_u8 ? U8_TABLE_VIRTUAL : U16_TABLE_VIRTUAL}; 

            airgroup.std.rc.u8_used = airgroup.std.rc.u8_used || is_u8;
            airgroup.std.rc.u16_used = airgroup.std.rc.u16_used || !is_u8;
            lookup_assumes(opid, [expression], sel, PIOP_NAME_RANGE_CHECK);
        } else {
            // Here, the range is of the form [a,b], with a >= 0 and b <= MASK_8/16, except for the range [0,MASK_8/16]
            const int is_u8 = (max <= MASK_8) ? 1 : 0;

            @range_def{opid: opid, predefined: predefined, min: min, max: max, 
                       min_neg: 0, max_neg: 0, 
                       type: is_u8 ? "U8Double" : "U16Double", is_virtual: is_u8 ? U8_TABLE_VIRTUAL : U16_TABLE_VIRTUAL}; 

            airgroup.std.rc.u8_used = airgroup.std.rc.u8_used || is_u8;
            airgroup.std.rc.u16_used = airgroup.std.rc.u16_used || !is_u8;

            // expression is in [a,b] iff expression-min is in [0,MASK_8/16] and max-expression is in [0,MASK_8/16]
            lookup_assumes(opid, [expression - min], sel, PIOP_NAME_RANGE_CHECK);
            lookup_assumes(opid, [max - expression], sel, PIOP_NAME_RANGE_CHECK);
        }
    } else {
        @range_def{opid: opid, predefined: predefined, min: min, max: max, 
                   min_neg: (min < 0), max_neg: (max < 0), 
                   type: "Specified", is_virtual: SPECIFIED_TABLE_VIRTUAL};

        lookup_assumes(opid, [expression], sel, PIOP_NAME_RANGE_CHECK);
    }

    // Define the range check proves
    define_proves(absorb);
}

/**
 * Performs a range check on a group of expressions within a specified range.
 *
 * @param expressions The expressions to be range checked.
 * @param min         The minimum value of the range (inclusive).
 * @param max         The maximum value of the range (inclusive).
 * @param sel         The selectors specifying which rows are subject to the range check for each expression.
 * @param predefined  A flag indicating whether to use predefined ranges.
 *
 * @note If `predefined` is true, the provided range [min, max] may be overridden
 *       by one of the predefined ranges, such as:
 *       - U8: [0, 255]
 *       - U16: [0, 65535]
 */
function range_check_group(const expr expressions[], const int min, const int max, const expr sels[], const int predefined = 0) {
    const int len = length(expressions);
    if (len != length(sels)) {
        error(`The length of expressions (${len}) and sels (${length(sels)}) should be the same`);
    }

    for (int i = 0; i < len; i++) {
        range_check(expressions[i], min, max, sels[i], predefined);
    }
}

/**
 * Performs a range check on an expression within one of two specified ranges, 
 * determined by a range selector.
 *
 * - If `range_sel = 1`, the range [min1, max1] is checked.
 * - Otherwise, the range [min2, max2] is checked.
 *
 * @param expression The expression to be range checked.
 * @param min1       The minimum value of the first range (inclusive).
 * @param max1       The maximum value of the first range (inclusive).
 * @param min2       The minimum value of the second range (inclusive).
 * @param max2       The maximum value of the second range (inclusive).
 * @param range_sel  A selector that determines which range to apply for the check.
 * @param sel        A selector specifying which rows are subject to the range check.
 * @param predefined A flag indicating whether to use predefined ranges.
 *
 * @note If `predefined` is true, the provided range [min, max] may be overridden
 *       by one of the predefined ranges, such as:
 *       - U8: [0, 255]
 *       - U16: [0, 65535]
 */
// TODO: Generalize to more than 2 ranges
function multi_range_check(const expr expression, const int min1, const int max1, const int min2, const int max2, 
                           const expr range_sel = 1, const expr sel = 1, const int predefined = 0): int {
    if (predefined) {
        error("WIP: Multi range check cannot be predefined");
    }

    if (min1 == min2 && max1 == max2) {
        error(`The ranges defined in the multi range check are the same: [${min1},${max1}]`);
    }

    range_validator(min1, max1);
    range_validator(min2, max2);

    const int opid1 = opid_process(min1, max1, predefined, absorb: 0);
    const int opid2 = opid_process(min2, max2, predefined, absorb: 0);

    @range_def{opid: opid1, predefined: predefined, min: min1, max: max1, 
               min_neg: (min1 < 0), max_neg: (max1 < 0), 
               type: "Specified", is_virtual: SPECIFIED_TABLE_VIRTUAL};
    @range_def{opid: opid2, predefined: predefined, min: min2, max: max2, 
               min_neg: (min2 < 0), max_neg: (max2 < 0), 
               type: "Specified", is_virtual: SPECIFIED_TABLE_VIRTUAL};

    // Define the assume
    lookup_assumes_dynamic([opid1, opid2], range_sel*(opid1-opid2) + opid2, [expression], sel, PIOP_NAME_RANGE_CHECK);

    // Define the prove
    define_proves(absorb: 0);

    // Note: This solution improves the naive solution:
    //   · range_check(expression, min1, max1, 0, sel*range_sel).
    //   · range_check(expression, min2, max2, 0, sel*(1-range_sel)).
    // by just performing 1 assumes and (at most) 2 proves instead
    //
    // Q: Can I do it with 1 assume and 1 prove? E.g.:
    // lookup_assumes_dynamic([opid1,opid2], range_sel*(opid1-opid2) - opid2, [expression], sel, PIOP_NAME_RANGE_CHECK);
    // lookup_proves(opid, [min1..max1-1,max1...]U[min2..max2-1,max2...], mul, PIOP_NAME_RANGE_CHECK);
}

/**
 * Obtains an ID for a range, which can be used to perform a dynamic range check.
 *
 * @param min        The minimum value of the range (inclusive).
 * @param max        The maximum value of the range (inclusive).
 * @param predefined A flag indicating whether to use predefined ranges.
 *
 * @return The ID of the range check.
 */
function range_check_id(const int min, const int max, const int predefined = 0): int {
    if (predefined) {
        error("WIP: Range check id cannot be predefined");
    }

    range_validator(min, max);

    container air.std.rcid alias rcid {
        int opids_count_id = 0;
        int opids_id[ARRAY_SIZE];
        int called = 0;
    }

    const int opid = opid_process(min, max, predefined, absorb: 0);

    @range_def{opid: opid, predefined: predefined, min: min, max: max, 
               min_neg: (min < 0), max_neg: (max < 0), 
               type: "Specified", is_virtual: SPECIFIED_TABLE_VIRTUAL};

    // Save the opid for use in the dynamic range check
    rcid.opids_id[rcid.opids_count_id] = opid;
    rcid.opids_count_id++;

    // At the end of the air, check if dynamic range checks were called
    on final air check_dynamic_called();

    return opid;
}

/**
 * Performs a dynamic range check on an expression using a user-defined range selector.
 *
 * @param expression The expression to be range checked.
 * @param range_sel  The range selector that determines which range to apply for the check.
 * @param sel        A selector specifying which rows are subject to the range check.
 */
function range_check_dynamic(const expr expression, const expr range_sel, const expr sel = 1) {
    use air.std.rcid;

    // Mark the dynamic range check as called
    called = 1;

    int opids[opids_count_id];
    for (int i = 0; i < opids_count_id; i++) {
        opids[i] = opids_id[i];
    }

    // Define the assume
    lookup_assumes_dynamic(opids, range_sel, [expression], sel, PIOP_NAME_RANGE_CHECK);

    // Define the prove
    define_proves(absorb: 0);
}

private function check_dynamic_called() {
    use air.std.rcid;
    if (!called) {
        error("Dynamic range check was not called");
    }
}

private function range_validator(const int min, const int max) {
    if (min > max) {
        error(`min = ${min} cannot be greater than max = ${max}`);
    } else if (min == max) {
        error(`Min and max are the same, you should use a single value check instead: expression === ${min}`);
    } else if (max - min + 1 < 8) { // The 8 was chosen comparing the cost of logup vs the cost of a multiple value check
        const int diff = max - min + 1;

        string diff_str = `(expression - ${min})`;
        for (int i = 1; i < diff; i++) {
            diff_str = diff_str + `·(expression - ${min + i})`;
        }

        println(`The range [${min}..${max}] is too small, consider using a multiple value check instead: ${diff_str} === 0`);
    } else if (max - min + 1 > MAX_RANGE_LEN) {
        error(`The range [${min}..${max}] is too big, the maximum range length is (PRIME - 1) / 2 = ${MAX_RANGE_LEN}`);
    } else if (max >= PRIME) {
        error(`The maximum value of the range cannot be greater than the field order ${PRIME}`);
    } else if (min <= -PRIME) {
        error(`The minimum value of the range cannot be less than the negative field order ${-PRIME}`);
    }
}

private function opid_process(const int min, const int max, const int predefined, const int absorb): int {
    container proof.std.rc alias rcproof {
        // Number of times U8, U16 and specified ranges air are used
        int num_u8_airgroup = 0;
        int num_u16_airgroup = 0;
        int num_spec_airgroup = 0;

        // Last airgroup id that uses U8, U16 and specified ranges air
        int max_u8_airgroup_id = 0;
        int max_u16_airgroup_id = 0;
        int max_spec_airgroup_id = 0;

        // Specified ranges data
        int spec_N = 1;
        int spec_opids[ARRAY_SIZE];
        int spec_mins[ARRAY_SIZE];
        int spec_maxs[ARRAY_SIZE];
        int spec_opids_count = 0;

        // Ranges data
        int opids[ARRAY_SIZE];
        int predefined[ARRAY_SIZE];
        int absorbed[ARRAY_SIZE];
        int mins[ARRAY_SIZE];
        int maxs[ARRAY_SIZE];
        int reps[ARRAY_SIZE];
        int opids_count = 0;

        // Global hints data
        int air_count = 0;
        int airgroup_ids[ARRAY_SIZE];
        int air_ids[ARRAY_SIZE];
    }

    container airgroup.std.rc {
        // To mark if the U8 and U16 airs are used within the airgroup
        int u8_used = 0;
        int u16_used = 0;
    }

    // Store the airgroup and air ids for global hints if it appears the first time
    int found = 0;
    for (int i = 0; i < rcproof.air_count; i++) {
        if (rcproof.airgroup_ids[i] == AIRGROUP_ID && rcproof.air_ids[i] == AIR_ID) {
            found = 1;
            break;
        }
    }

    if (!found) {
        rcproof.airgroup_ids[rcproof.air_count] = AIRGROUP_ID;
        rcproof.air_ids[rcproof.air_count] = AIR_ID;
        rcproof.air_count++;
    }

    // Generate global hints
    on final proof issue_rc_users_global(); 
    on final proof print_range_stats();

    for (int i = 0; i < rcproof.opids_count; i++) {
        if (min == rcproof.mins[i] && max == rcproof.maxs[i]) {
            if ((predefined == rcproof.predefined[i]) || (absorb == rcproof.absorbed[i])) {
                // If the range has already been introduced, increment the repetitions
                // and return the same opid
                rcproof.reps[i]++;
                return rcproof.opids[i];
            }
        }
    }

    // Otherwise, we get the corresponding opid
    const int opid = get_opid(min, max, predefined);

    // Save range data
    rcproof.opids[rcproof.opids_count] = opid;
    rcproof.predefined[rcproof.opids_count] = predefined;
    rcproof.absorbed[rcproof.opids_count] = absorb;
    rcproof.mins[rcproof.opids_count] = min;
    rcproof.maxs[rcproof.opids_count] = max;
    rcproof.reps[rcproof.opids_count] = 1;
    rcproof.opids_count++;

    // Exit if the range does not belong to the specified ranges air
    if (opid == U8AIR_OPID || opid == U16AIR_OPID) {
        return opid;
    }

    // Save specified ranges data
    rcproof.spec_opids[rcproof.spec_opids_count] = opid;
    rcproof.spec_mins[rcproof.spec_opids_count] = min;
    rcproof.spec_maxs[rcproof.spec_opids_count] = max;
    rcproof.spec_opids_count++;

    // If the range is bigger than the current spec_N, we update it
    const int range_size = max - min + 1;
    if (range_size > rcproof.spec_N) {
        rcproof.spec_N = range_size;
    }

    return opid;
}

private function define_proves(const int absorb) {
    if (absorb) {
        // If the U8 was used, update the max airgroup id
        if (airgroup.std.rc.u8_used) {
            if (proof.std.rc.max_u8_airgroup_id < AIRGROUP_ID) {
                proof.std.rc.max_u8_airgroup_id = AIRGROUP_ID;
            }

            on final(2) airgroup declare_u8_air();
        }

        // If the U16 was used, update the max airgroup id
        if (airgroup.std.rc.u16_used) {
            if (proof.std.rc.max_u16_airgroup_id < AIRGROUP_ID) {
                proof.std.rc.max_u16_airgroup_id = AIRGROUP_ID;
            }

            on final(2) airgroup declare_u16_air();
        }
    } else {
        // If the specified range is used, update the max airgroup id
        if (proof.std.rc.max_spec_airgroup_id < AIRGROUP_ID) {
            proof.std.rc.max_spec_airgroup_id = AIRGROUP_ID;
        }

        on final(2) airgroup declare_specified_air();
    }
}

private function declare_u8_air() {
    use proof.std.rc;

    // Update the number of U8 airgroups
    num_u8_airgroup++;

    // The U8 air is only needed once, so we wait for the last airgroup that uses it
    if (AIRGROUP_ID != max_u8_airgroup_id) {
        return;
    }

    // save the airgroup id and air id of the table for latter use
    container proof.std.u8 {
        int airgroup_id = -1;
        int air_id = -1;
    }

    const int u8_air_n = 2**MAX_U8_BITS;
    if (num_u8_airgroup == 1){
        // If the U8Air is needed only once, we instantiate it in the (single) callable airgroup
        if (U8_TABLE_VIRTUAL == 1) {
            virtual U8Air(N: u8_air_n);
        } else {
            U8Air(N: u8_air_n);
        }
    } else {
        // TODO: Discuss if this makes sense
        // If the U8Air is needed more than once, we instantiate it in its own airgroup
        airgroup U8Air {
            if (U8_TABLE_VIRTUAL == 1) {
                virtual U8Air(N: u8_air_n);
            } else {
                U8Air(N: u8_air_n);
            }
        }
    }

    on final proof issue_u8_data_global();
}

private function declare_u16_air() {
    use proof.std.rc;

    // Uupdate the number of U16 airgroups
    num_u16_airgroup++;

    // The U16 air is only needed once, so we wait for the last airgroup that uses it
    if (AIRGROUP_ID != max_u16_airgroup_id) {
        return;
    }

    // save the airgroup id and air id of the table for latter use
    container proof.std.u16 {
        int airgroup_id = -1;
        int air_id = -1;
    }

    const int u16_air_n = 2**MAX_U16_BITS;
    if (num_u16_airgroup == 1){
        // If the U16Air is needed only once, we instantiate it in the (single) callable airgroup
        if (U16_TABLE_VIRTUAL == 1) {
            virtual U16Air(N: u16_air_n);
        }
        else {
            U16Air(N: u16_air_n);
        }
    } else {
        // If the U16Air is needed more than once, we instantiate it in its own airgroup
        airgroup U16Air {
            if (U16_TABLE_VIRTUAL == 1) {
                virtual U16Air(N: u16_air_n);
            } else {
                U16Air(N: u16_air_n);
            }
        }
    }

    on final proof issue_u16_data_global();
}

private function declare_specified_air() {
    use proof.std.rc;

    // Update the number of specified ranges airgroups
    num_spec_airgroup++;

    // The specified ranges air is only needed once, so we wait for the last airgroup that uses them
    if (AIRGROUP_ID != max_spec_airgroup_id) {
        return;
    }

    // save relevant information for global hints
    container proof.std.specified {
        int airgroup_id = -1;
        int air_id = -1;
    }

    // Compute the smallest power of 2 that is greater than or equal to the maximum range length
    int next_pow2 = 1;
    if (MAX_SPECIFIED_BITS == -1) {
        next_pow2 = 2**(log2(spec_N));
        if (next_pow2 < spec_N) {
            next_pow2 *= 2;
        }
    } else if (MAX_SPECIFIED_BITS > -1) {
        next_pow2 = 2**MAX_SPECIFIED_BITS;
    } else {
        error(`The specified bits should be greater than or equal to -1, got ${MAX_SPECIFIED_BITS} instead`);
    }

    if (num_spec_airgroup == 1) {
        // If the SpecifiedRanges is needed only once, we instantiate it in the (single) callable airgroup
        if (SPECIFIED_TABLE_VIRTUAL == 1) {
            virtual SpecifiedRanges(next_pow2, spec_opids, spec_opids_count, spec_mins, spec_maxs);
        }
        else {
            SpecifiedRanges(next_pow2, spec_opids, spec_opids_count, spec_mins, spec_maxs);
        }
    } else {
        // If the SpecifiedRanges is needed more than once, we instantiate it in its own airgroup
        airgroup SpecifiedRanges {
            if (SPECIFIED_TABLE_VIRTUAL == 1) {
                virtual SpecifiedRanges(next_pow2, spec_opids, spec_opids_count, spec_mins, spec_maxs);
            }
            else {
                SpecifiedRanges(next_pow2, spec_opids, spec_opids_count, spec_mins, spec_maxs);
            }
        }
    }

    on final proof issue_specified_data_global();
}

private function issue_u8_data_global() {
    use proof.std.u8;
    @u8air{airgroup_id: airgroup_id, air_id: air_id};
}

private function issue_u16_data_global() {
    use proof.std.u16;
    @u16air{airgroup_id: airgroup_id, air_id: air_id};
}

private function issue_specified_data_global() {
    use proof.std.specified;
    @specified_ranges{airgroup_id: airgroup_id, air_id: air_id};
}

private function issue_rc_users_global() {
    use proof.std.rc;
    @std_rc_users{num_users: air_count, airgroup_ids: airgroup_ids, air_ids: air_ids, opids_count: opids_count, spec_opids_count: spec_opids_count};
}

private function print_range_stats() {
    use proof.std.rc;

    println("Range check stats:");
    for (int i = 0; i < opids_count; i++) {
        const int num_reps = reps[i];
        const string num_reps_str = (num_reps == 1) ? "time" : "times";
        println(` - [${mins[i]}, ${maxs[i]}]: ${num_reps} ${num_reps_str}`);
    }
}