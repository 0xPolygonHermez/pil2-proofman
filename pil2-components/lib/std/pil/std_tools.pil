require "std_constants.pil";

function set_bus_type(const int bus_type) {
    if (bus_type != PIOP_BUS_SUM && bus_type != PIOP_BUS_PROD) {
        error(`Unknown bus type: ${bus_type}`);
    }

    // Set the bus type for the std components
    DEFAULT_PERMUTATION_BUS_TYPE = bus_type;

    on final air gen_airgroup_values();
}

function gen_airgroup_values() {
    if (!defined(airgroup.std.gsum.gsum_result)) {
        container airgroup.std.gsum alias gsumval {
            airgroupval aggregate(sum) gsum_result;
        }

        gsumval.gsum_result === 0;
    }

    if (!defined(airgroup.std.gprod.gprod_result)) {
        container airgroup.std.gprod alias gprodval {
            airgroupval aggregate(prod) gprod_result;
        }

        gprodval.gprod_result === 1;
    }
}

function init_challenges() {
    if (!defined(std_alpha)) {
        challenge stage(2) std_alpha;
    }
    if (!defined(std_gamma)) {
        challenge stage(2) std_gamma;
    }
}

/**
 * Given columns C₁,...,Cₙ, reduces the vector PIOP to a single column PIOP.
 * @param busid (unique) identifier of the PIOP
 * @param cols columns of the PIOP
 * @return busid + C₁·α + C₂·α² + ... + Cₙ·αⁿ
 */
function compress_cols(expr busid, expr cols[]): expr {
    expr cols_compressed = 0;
    for (int i = length(cols) - 1; i >= 0; i = i - 1) {
        cols_compressed = (cols_compressed + cols[i]) * std_alpha;
    }
    cols_compressed = cols_compressed + busid;

    return cols_compressed;
}

function get_L1 () : expr {
    if (!defined(__L1__)) {
        col fixed __L1__ = [1,0...];
    }
    return __L1__;
}