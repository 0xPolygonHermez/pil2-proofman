// WARNING: This file has been autogenerated from the PILOUT file.
// Manual modifications are not recommended and may be overwritten.
#![allow(clippy::all)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(dead_code)]

use proofman_common as common;
pub use proofman_macros::trace;
pub use proofman_macros::values;

use std::fmt;

use rayon::prelude::*;

#[allow(dead_code)]
type FieldExtension<F> = [F; 3];

pub const PILOUT_HASH: &str = "664cf64feb5930374c4d9d2b5f99acb15702f1ccde819d0d2d49db250ffc7281";

//AIRGROUP CONSTANTS

pub const DIRECT_UPDATE_PROD_AIRGROUP_ID: usize = 0;

pub const DIRECT_UPDATE_SUM_AIRGROUP_ID: usize = 1;

//AIR CONSTANTS

pub const DIRECT_UPDATE_PROD_LOCAL_AIR_IDS: &[usize] = &[0];

pub const DIRECT_UPDATE_PROD_GLOBAL_AIR_IDS: &[usize] = &[1];

pub const DIRECT_UPDATE_SUM_LOCAL_AIR_IDS: &[usize] = &[0];

pub const DIRECT_UPDATE_SUM_GLOBAL_AIR_IDS: &[usize] = &[1];

//PUBLICS
use serde::Deserialize;
use serde::Serialize;
use serde_arrays;

fn default_array_a_public() -> [u64; 2] {
    [0; 2]
}

fn default_array_c_public() -> [u64; 2] {
    [0; 2]
}

fn default_array_a_public_s() -> [u64; 2] {
    [0; 2]
}

fn default_array_c_public_s() -> [u64; 2] {
    [0; 2]
}

#[derive(Debug, Serialize, Deserialize)]
pub struct DirectUpdatePublics {
    #[serde(default = "default_array_a_public", with = "serde_arrays")]
    pub a_public: [u64; 2],
    #[serde(default = "default_array_c_public", with = "serde_arrays")]
    pub c_public: [u64; 2],
    #[serde(default = "default_array_a_public_s", with = "serde_arrays")]
    pub a_public_s: [u64; 2],
    #[serde(default = "default_array_c_public_s", with = "serde_arrays")]
    pub c_public_s: [u64; 2],
}

impl Default for DirectUpdatePublics {
    fn default() -> Self {
        Self { a_public: [0; 2], c_public: [0; 2], a_public_s: [0; 2], c_public_s: [0; 2] }
    }
}

values!(DirectUpdatePublicValues<F> {
 a_public: [F; 2], c_public: [F; 2], a_public_s: [F; 2], c_public_s: [F; 2],
});

values!(DirectUpdateProofValues<F> {
 b_proofval_0: F, b_proofval_1: F, d_proofval_0: F, d_proofval_1: F, perform_global_update_0: F, perform_global_update_1: F, b_proofval_0_s: F, b_proofval_1_s: F, d_proofval_0_s: F, d_proofval_1_s: F, perform_global_update_0_s: F, perform_global_update_1_s: F,
});

trace!(DirectUpdateProdLocalFixed<F> {
 __L1__: F,
},  0, 0, 16 );

trace!(DirectUpdateProdLocalTrace<F> {
 a: [F; 2], b: [F; 2], c: [F; 2], perform_operation: F,
},  0, 0, 16 );

trace!(DirectUpdateProdGlobalFixed<F> {
 __L1__: F,
},  0, 1, 16 );

trace!(DirectUpdateProdGlobalTrace<F> {
 c: [F; 2], d: [F; 2], perform_operation: F,
},  0, 1, 16 );

trace!(DirectUpdateSumLocalFixed<F> {
 __L1__: F,
},  1, 0, 32 );

trace!(DirectUpdateSumLocalTrace<F> {
 a: [F; 2], b: [F; 2], c: [F; 2], perform_operation: F,
},  1, 0, 32 );

trace!(DirectUpdateSumGlobalFixed<F> {
 __L1__: F,
},  1, 1, 32 );

trace!(DirectUpdateSumGlobalTrace<F> {
 c: [F; 2], d: [F; 2], perform_operation: F,
},  1, 1, 32 );

values!(DirectUpdateProdLocalAirValues<F> {
 c_airval: [F; 2], perform_direct_update: [F; 2],
});

values!(DirectUpdateSumLocalAirValues<F> {
 c_airval: [F; 2], perform_direct_update: [F; 2], im_direct: [FieldExtension<F>; 2],
});

values!(DirectUpdateProdLocalAirGroupValues<F> {
 gprod_result: FieldExtension<F>,
});

values!(DirectUpdateProdGlobalAirGroupValues<F> {
 gprod_result: FieldExtension<F>,
});

values!(DirectUpdateSumLocalAirGroupValues<F> {
 gsum_result: FieldExtension<F>,
});

values!(DirectUpdateSumGlobalAirGroupValues<F> {
 gsum_result: FieldExtension<F>,
});
