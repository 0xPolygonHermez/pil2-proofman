require "std_range_check.pil";

airtemplate RangeCheck1(const int N = 2**3) {

    col witness a1,a2,a3;

    range_check(a1, 0, 2**8-1, predefined: 1);  // U8
    range_check(a2, 0, 2**16-1, predefined: 1); // U16

    range_check(a1, 0, 2**8-1, predefined: 0);  // Specified
    range_check(a2, 0, 2**16-1, predefined: 0); // Specified

    range_check(a3, 40, 100, predefined: 0);    // Specified
};

airtemplate RangeCheck2(const int N = 2**4) {

    col witness b1,b2,b3;

    range_check(b1, 1, 2**8-2, predefined: 1);   // U8
    range_check(b2, 1, 2**16-2, predefined: 1);  // U16
    range_check(b3, 40, 100, predefined: 0);     // Specified
};

// airgroup RangeCheck1 {
//     RangeCheck1();
//     // RangeCheck2();
// }

// airgroup RangeCheck2 {
//     RangeCheck2();
// }

airtemplate MultiRangeCheck1(const int N = 2**3) {

    col witness a[3];
    col witness sel[3];
    col witness range_sel[3];

    multi_range_check(a[0], 0, 2**7-1, 0, 2**8-1, range_sel[0], sel[0]);       // Both Specified
    multi_range_check(a[1], 0, 2**7-1, 0, 2**6-1, range_sel[1], sel[1]);       // Both Specified
    multi_range_check(a[2], 2**5, 2**8-1, 2**8, 2**9-1, range_sel[2], sel[2]); // Both Specified
};

airtemplate MultiRangeCheck2(const int N = 2**4) {

    col witness a[2];
    col witness sel[2];
    col witness range_sel[2];

    multi_range_check(a[0], 2**5, 2**8-1, 2**8, 2**9-1, range_sel[0], sel[0]); // Both Specified
    multi_range_check(a[1], 0, 2**7-1, 0, 2**4-1, range_sel[1], sel[1]);       // Both Specified
};

// airgroup MultiRangeCheck1 {
//     MultiRangeCheck1();
//     // MultiRangeCheck2();
// }

// airgroup MultiRangeCheck2 {
//     MultiRangeCheck2();
// }

airtemplate RangeCheckDynamic1(const int N = 2**8) {

    col witness colu;
    col witness sel_7, sel_8, sel_16, sel_17;

    // All of them Specified
    int id_range_7 = range_check_id(0, 2**7-1);
    int id_range_8 = range_check_id(0, 2**8-1);
    assert(id_range_8 != OPIDS[0]);
    int id_range_8_2 = range_check_id(0, 2**8-1);
    assert(id_range_8_2 == id_range_8);
    int id_range_17 = range_check_id(0, 2**17-1);
    int id_range_16 = range_check_id(0, 2**16-1);
    assert(id_range_16 != OPIDS[1]);
    int id_range_7_2 = range_check_id(0, 2**7-1);
    assert(id_range_7_2 == id_range_7);

    range_check_dynamic(colu, id_range_7 * sel_7 + id_range_8 * sel_8 + id_range_16 * sel_16 + id_range_17 * sel_17);
};

airtemplate RangeCheckDynamic2(const int N = 2**6) {

    col witness colu;
    col witness sel_1, sel_2, sel_3, sel_4, sel_5;

    // All of them Specified
    int id_range_1 = range_check_id(5225, 29023);
    int id_range_2 = range_check_id(-8719, -7269);
    int id_range_3 = range_check_id(-10, 10);
    int id_range_4 = range_check_id(0, 2**8-1);
    assert(id_range_4 != OPIDS[0]);
    int id_range_5 = range_check_id(0, 2**7-1);

    range_check_dynamic(colu, id_range_1 * sel_1 + id_range_2 * sel_2 + id_range_3 * sel_3 + id_range_4 * sel_4 + id_range_5 * sel_5);
};

// airgroup RangeCheckDynamic1 {
//     RangeCheckDynamic1();
//     // RangeCheckDynamic2();
// }

// airgroup RangeCheckDynamic2 {
//     RangeCheckDynamic2();
// }