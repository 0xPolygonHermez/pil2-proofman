require "std_constants.pil";
require "std_sum.pil";

/*
    Constraint to optimize:
                                NUMi
                GL === GR + ∑ᵢ ----------
                                DENi + ɣ
        · GR is an expression of degree 2 to be as close as possible to the actual expression.
        · ɣ is a challenge added to make the denominator an extension-field expression.

    Table of generated numbers, which assume a blowup factor of 2:

    | M  | degNum | degDen |  Type  | maxConstDeg | #Cols1 | #Cols2 | #ColsQ |  Total | #Const | #Evals |
    ┼────┼────────|────────|────────┼─────────────┼────────┼────────┼────────┼────────┼────────┼────────┼
    |    |        |        |  Dummy |      2      |   2    |   6    |   3    |   11   |   3    |   8    |
    |  1 |   1    |   1    |────────┼─────────────┼────────┼────────┼────────┼────────┼────────┼────────┼
    |    |        |        | Custom |      2      |   2    |   6    |   3    |   11   |   3    |   8    |
    ┼────┼────────|────────|────────┼─────────────┼────────┼────────┼────────┼────────┼────────┼────────┼
    |    |        |        |  Dummy |      2      |   4    |   9    |   3    |   16   |   4    |   11   |
    |  2 |   1    |   1    |────────┼─────────────┼────────┼────────┼────────┼────────┼────────┼────────┼
    |    |        |        | Custom |      2      |   4    |   9    |   3    |   16   |   4    |   11   |
    ┼────┼────────|────────|────────┼─────────────┼────────┼────────┼────────┼────────┼────────┼────────┼
    |    |        |        |  Dummy |      3      |   8    |   21   |   6    |   35   |   8    |   20   |
    |  4 |   1    |   1    |────────┼─────────────┼────────┼────────┼────────┼────────┼────────┼────────┼
    |    |        |        | Custom |      3      |   8    |   9    |   6    |   23   |   4    |   16   |
    ┼────┼────────|────────|────────┼─────────────┼────────┼────────┼────────┼────────┼────────┼────────┼
    |    |        |        |  Dummy |      3      |   12   |   48   |   6    |   66   |   17   |   33   |
    |  6 |   1    |   1    |────────┼─────────────┼────────┼────────┼────────┼────────┼────────┼────────┼
    |    |        |        | Custom |      3      |   12   |   12   |   6    |   30   |   5    |   21   |
    ┼────┼────────|────────|────────┼─────────────┼────────┼────────┼────────┼────────┼────────┼────────┼
    |    |        |        |  Dummy |      3      |   16   |   87   |   6    |   109  |   30   |   50   |
    |  8 |   1    |   1    |────────┼─────────────┼────────┼────────┼────────┼────────┼────────┼────────┼
    |    |        |        | Custom |      3      |   16   |   15   |   6    |   37   |   6    |   26   |
    ┼────┼────────|────────|────────┼─────────────┼────────┼--------┼--------┼--------┼--------┼--------┼
*/

airtemplate ImDummy(const int N = 2**8, const int degNum = 1, const int degDen = 1, const int M = 6) {
    set_expressions_im_non_reduced(-1); // Don't apply any reduction

    // Enlarge the degree of the numerator
    col witness num[M];
    expr NUM[M] = increase_degree(num, degNum);

    // Enlarge the degree of the denominator
    col witness den[M];
    expr DEN[M] = increase_degree(den, degDen);

    for (int i = 0; i < M; i++) {
        sum_assumes(PIOP_NAME_ISOLATED, [0], 0, [den[i]], num[i])
    }
}

airtemplate ImCustom(const int N = 2**8, const int degNum = 1, const int degDen = 1, const int M = 6) {
    set_expressions_im_non_reduced(0); // Apply all the reductions

    // Enlarge the degree of the numerator
    col witness num[M];
    expr NUM[M] = increase_degree(num, degNum);

    // Enlarge the degree of the denominator
    col witness den[M];
    expr DEN[M] = increase_degree(den, degDen);

    for (int i = 0; i < M; i++) {
        sum_proves(PIOP_NAME_ISOLATED, [0], 0, [den[i]], num[i])
    }
}

function increase_degree(expr exps[], const int deg): expr[] {
    const int M = length(exps);
    expr result[M];
    for (int i = 0; i < M; i++) {
        result[i] = exps[i];
        for (int j = 1; j < deg; j++) {
            col witness _exp;
            result[i] *= _exp;
        }
        assert(degree(result[i]) == deg);
    }

    return result;
}

airgroup Intermediates {
    ImDummy(degNum: 2, degDen: 2, M: 1) alias ImDummy_1;
    ImCustom(degNum: 2, degDen: 2, M: 1) alias ImCustom_1;

    ImDummy(degNum: 1, degDen: 1, M: 2) alias ImDummy_2;
    ImCustom(degNum: 1, degDen: 1, M: 2) alias ImCustom_2;

    ImDummy(degNum: 1, degDen: 1, M: 4) alias ImDummy_4;
    ImCustom(degNum: 1, degDen: 1, M: 4) alias ImCustom_4;

    ImDummy(degNum: 1, degDen: 1, M: 6) alias ImDummy_6;
    ImCustom(degNum: 1, degDen: 1, M: 6) alias ImCustom_6;

    ImDummy(degNum: 1, degDen: 1, M: 8) alias ImDummy_8;
    ImCustom(degNum: 1, degDen: 1, M: 8) alias ImCustom_8;
}