require "std_constants.pil";
require "std_sum.pil";

/*
    Constraint to optimize:
                                   NUMi
                GL === GR + ∑ᵢ ----------
                                 DENi + ɣ
    Where:
        · GL is an expression of degree 1.
        · GR is an expression of degree 2.
        · ɣ is a challenge added to make the denominator an extension-field expression.

    To generate stats:
    node ../pil2-compiler/src/pil.js ./pil2-components/test/std/special/intermediate_sums.pil -I ./pil2-components/lib/std/pil -o ./pil2-components/test/std/special/build/intermediate_sums.pilout
    node --max-old-space-size=131072 ../pil2-proofman-js/src/main_stats.js -a pil2-components/test/std/special/build/intermediate_sums.pilout -o pil2-components/test/std/special/build/intermediate_sums.stats
*/

airtemplate ImDummy(const int N = 2**8, const int deg_num = 1, const int deg_den = 1, const int M = 6) {
    assert(M > 0);

    sum_set_expressions_im_non_reduced(-1); // Don't apply any reduction

    // Enlarge the degree of the numerator
    col witness num[M];
    expr NUM[M] = increase_degree(num, deg_num);

    // Enlarge the degree of the denominator
    col witness den[M];
    expr DEN[M] = increase_degree(den, deg_den);

    for (int i = 0; i < M; i++) {
        sum(PIOP_NAME_ISOLATED, SUM_TYPE_ASSUMES, [0], 0, [DEN[i]], NUM[i])
    }
}

airtemplate ImCustom(const int N = 2**8, const int deg_num = 1, const int deg_den = 1, const int M = 6) {
    assert(M > 0);

    sum_set_expressions_im_non_reduced(0); // Apply all the reductions

    // Enlarge the degree of the numerator
    col witness num[M];
    expr NUM[M] = increase_degree(num, deg_num);

    // Enlarge the degree of the denominator
    col witness den[M];
    expr DEN[M] = increase_degree(den, deg_den);

    for (int i = 0; i < M; i++) {
        sum(PIOP_NAME_ISOLATED, SUM_TYPE_PROVES, [0], 0, [DEN[i]], NUM[i])
    }
}

function increase_degree(expr exps[], const int deg): expr[] {
    const int M = length(exps);
    expr result[M];
    for (int i = 0; i < M; i++) {
        result[i] = exps[i];
        for (int j = 1; j < deg; j++) {
            col witness _exp;
            result[i] *= _exp;
        }
        assert(degree(result[i]) == deg);
    }

    return result;
}

airgroup Intermediates {
    ImDummy(deg_num: 1, deg_den: 1, M: 1) alias ImDummy_1;
    ImCustom(deg_num: 1, deg_den: 1, M: 1) alias ImCustom_1;

    ImDummy(deg_num: 1, deg_den: 1, M: 2) alias ImDummy_2;
    ImCustom(deg_num: 1, deg_den: 1, M: 2) alias ImCustom_2;

    ImDummy(deg_num: 1, deg_den: 1, M: 4) alias ImDummy_4;
    ImCustom(deg_num: 1, deg_den: 1, M: 4) alias ImCustom_4;

    ImDummy(deg_num: 1, deg_den: 1, M: 8) alias ImDummy_8;
    ImCustom(deg_num: 1, deg_den: 1, M: 8) alias ImCustom_8;

    ImDummy(deg_num: 1, deg_den: 1, M: 16) alias ImDummy_16;
    ImCustom(deg_num: 1, deg_den: 1, M: 16) alias ImCustom_16;
}