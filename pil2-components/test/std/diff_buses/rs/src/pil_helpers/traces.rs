// WARNING: This file has been autogenerated from the PILOUT file.
// Manual modifications are not recommended and may be overwritten.
#![allow(clippy::all)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(dead_code)]

use proofman_common as common;
pub use proofman_macros::trace;
pub use proofman_macros::values;

use std::fmt;

use rayon::prelude::*;

#[allow(dead_code)]
type FieldExtension<F> = [F; 3];

pub const PILOUT_HASH: &str = "5603b3e47def8ed8a647902c9a9071f9e561cb9409bc12fa5aabed65c70160b5";

//AIRGROUP CONSTANTS

pub const BUSES_AIRGROUP_ID: usize = 0;

//AIR CONSTANTS

pub const PROD_BUS_AIR_IDS: &[usize] = &[0];

pub const SUM_BUS_AIR_IDS: &[usize] = &[1];

pub const BOTH_BUSES_AIR_IDS: &[usize] = &[2];

  
trace!(ProdBusFixed<F> {
 __L1__: F,
},  0, 0, 16 );

trace!(ProdBusTrace<F> {
 a: F, b: F,
},  0, 0, 16 );

trace!(SumBusFixed<F> {
 __L1__: F,
},  0, 1, 32 );

trace!(SumBusTrace<F> {
 a: F, b: F,
},  0, 1, 32 );

trace!(BothBusesFixed<F> {
 __L1__: F,
},  0, 2, 16 );

trace!(BothBusesTrace<F> {
 a: F, b: F, c: F, d: F,
},  0, 2, 16 );

values!(ProdBusAirGroupValues<F> {
 gprod_result: FieldExtension<F>, gsum_result: FieldExtension<F>,
});

values!(SumBusAirGroupValues<F> {
 gprod_result: FieldExtension<F>, gsum_result: FieldExtension<F>,
});

values!(BothBusesAirGroupValues<F> {
 gprod_result: FieldExtension<F>, gsum_result: FieldExtension<F>,
});
