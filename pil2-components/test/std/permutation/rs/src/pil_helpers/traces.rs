// WARNING: This file has been autogenerated from the PILOUT file.
// Manual modifications are not recommended and may be overwritten.
#![allow(clippy::all)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(dead_code)]

use proofman_common as common;
pub use proofman_macros::trace;
pub use proofman_macros::values;

use std::fmt;

use rayon::prelude::*;

#[allow(dead_code)]
type FieldExtension<F> = [F; 3];

pub const PILOUT_HASH: &str = "74ea81410bd9e5b561f0a6c5715a599f971fb54a8e3c4d93e32ff36cae5aaf7f";

//AIRGROUP CONSTANTS

pub const PERMUTATION_AIRGROUP_ID: usize = 0;

//AIR CONSTANTS

pub const PERMUTATION_1_6_AIR_IDS: &[usize] = &[0];

pub const PERMUTATION_1_7_AIR_IDS: &[usize] = &[1];

pub const PERMUTATION_1_8_AIR_IDS: &[usize] = &[2];

pub const PERMUTATION_2_6_AIR_IDS: &[usize] = &[3];

  
trace!(Permutation1_6Fixed<F> {
 __L1__: F,
},  0, 0, 64 );

trace!(Permutation1_6Trace<F> {
 a1: F, b1: F, a2: F, b2: F, a3: F, b3: F, a4: F, b4: F, c1: F, d1: F, c2: F, d2: F, sel1: F, sel2: F, sel3: F,
},  0, 0, 64 );

trace!(Permutation1_7Fixed<F> {
 __L1__: F,
},  0, 1, 128 );

trace!(Permutation1_7Trace<F> {
 a1: F, b1: F, a2: F, b2: F, a3: F, b3: F, a4: F, b4: F, c1: F, d1: F, c2: F, d2: F, sel1: F, sel2: F, sel3: F,
},  0, 1, 128 );

trace!(Permutation1_8Fixed<F> {
 __L1__: F,
},  0, 2, 256 );

trace!(Permutation1_8Trace<F> {
 a1: F, b1: F, a2: F, b2: F, a3: F, b3: F, a4: F, b4: F, c1: F, d1: F, c2: F, d2: F, sel1: F, sel2: F, sel3: F,
},  0, 2, 256 );

trace!(Permutation2_6Fixed<F> {
 __L1__: F,
},  0, 3, 512 );

trace!(Permutation2_6Trace<F> {
 c1: F, d1: F, c2: F, d2: F, sel: F,
},  0, 3, 512 );

values!(Permutation1_6AirGroupValues<F> {
 gsum_result: FieldExtension<F>, gprod_result: FieldExtension<F>,
});

values!(Permutation1_7AirGroupValues<F> {
 gsum_result: FieldExtension<F>, gprod_result: FieldExtension<F>,
});

values!(Permutation1_8AirGroupValues<F> {
 gsum_result: FieldExtension<F>, gprod_result: FieldExtension<F>,
});

values!(Permutation2_6AirGroupValues<F> {
 gsum_result: FieldExtension<F>, gprod_result: FieldExtension<F>,
});
