// WARNING: This file has been autogenerated from the PILOUT file.
// Manual modifications are not recommended and may be overwritten.
#![allow(clippy::all)]
#![allow(non_snake_case)]

use proofman_common as common;
pub use proofman_macros::trace;
pub use proofman_macros::values;

use std::fmt;

#[allow(dead_code)]
type FieldExtension<F> = [F; 3];

pub const PILOUT_HASH: &[u8] = b"Build-hash";

//AIRGROUP CONSTANTS

pub const CONNECTION_AIRGROUP_ID: usize = 0;

//AIR CONSTANTS

pub const CONNECTION_1_AIR_IDS: &[usize] = &[0];

pub const CONNECTION_2_AIR_IDS: &[usize] = &[1];

pub const CONNECTION_NEW_AIR_IDS: &[usize] = &[2];

  
trace!(Connection1Fixed<F> {
 S1: F, S2: F, S3: F, ID: F, __L1__: F,
},  0, 0, 8 );

trace!(Connection1Trace<F> {
 a: F, b: F, c: F,
},  0, 0, 8 );

trace!(Connection2Fixed<F> {
 S1: F, S2: F, S3: F, ID: F, __L1__: F,
},  0, 1, 16 );

trace!(Connection2Trace<F> {
 a: F, b: F, c: F,
},  0, 1, 16 );

trace!(ConnectionNewFixed<F> {
 ID: F, CONN_2: [F; 3], CONN_3: [F; 3], CONN_4: [F; 3], CONN_5: [F; 3], CONN_6: [F; 4], CONN_7: [F; 4], __L1__: F,
},  0, 2, 16 );

trace!(ConnectionNewTrace<F> {
 a: [F; 6], b: [F; 6], c: [F; 6], d: [F; 6],
},  0, 2, 16 );

values!(Connection1AirGroupValues<F> {
 gprod_result: FieldExtension<F>,
});

values!(Connection2AirGroupValues<F> {
 gprod_result: FieldExtension<F>,
});

values!(ConnectionNewAirGroupValues<F> {
 gprod_result: FieldExtension<F>,
});
