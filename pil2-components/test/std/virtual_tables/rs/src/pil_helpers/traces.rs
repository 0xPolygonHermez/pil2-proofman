// WARNING: This file has been autogenerated from the PILOUT file.
// Manual modifications are not recommended and may be overwritten.
#![allow(clippy::all)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(dead_code)]

use proofman_common as common;
pub use proofman_macros::trace;
pub use proofman_macros::values;

use std::fmt;

use rayon::prelude::*;

#[allow(dead_code)]
type FieldExtension<F> = [F; 3];

pub const PILOUT_HASH: &str = "d8c460714dbad0684c6b91c775d20e560dabbc758b6887354c1e75ca7af98c46";

//AIRGROUP CONSTANTS

pub const VIRTUAL_TABLES_AIRGROUP_ID: usize = 0;

//AIR CONSTANTS

pub const COMPONENT_1_AIR_IDS: &[usize] = &[0];

pub const COMPONENT_2_AIR_IDS: &[usize] = &[1];

pub const COMPONENT_3_AIR_IDS: &[usize] = &[2];

pub const COMPONENT_4_AIR_IDS: &[usize] = &[3];

pub const COMPONENT_5_AIR_IDS: &[usize] = &[4];

pub const COMPONENT_6_AIR_IDS: &[usize] = &[5];

pub const COMPONENT_7_AIR_IDS: &[usize] = &[6];

pub const TABLE_7_AIR_IDS: &[usize] = &[7];

pub const COMPONENT_8_AIR_IDS: &[usize] = &[8];

pub const COMPONENT_9_AIR_IDS: &[usize] = &[9];

pub const VIRTUAL_TABLE_0_AIR_IDS: &[usize] = &[10];

pub const VIRTUAL_TABLE_1_AIR_IDS: &[usize] = &[11];

pub const VIRTUAL_TABLE_2_AIR_IDS: &[usize] = &[12];

  
trace!(Component1Fixed<F> {
 __L1__: F,
},  0, 0, 32 );

trace!(Component1Trace<F> {
 a: [F; 5],
},  0, 0, 32 );

trace!(Component2Fixed<F> {
 __L1__: F,
},  0, 1, 16 );

trace!(Component2Trace<F> {
 a: [F; 3],
},  0, 1, 16 );

trace!(Component3Fixed<F> {
 __L1__: F,
},  0, 2, 4 );

trace!(Component3Trace<F> {
 a: [F; 3],
},  0, 2, 4 );

trace!(Component4Fixed<F> {
 __L1__: F,
},  0, 3, 128 );

trace!(Component4Trace<F> {
 a: [F; 2], b: [F; 3],
},  0, 3, 128 );

trace!(Component5Fixed<F> {
 __L1__: F,
},  0, 4, 64 );

trace!(Component5Trace<F> {
 a: [F; 6],
},  0, 4, 64 );

trace!(Component6Fixed<F> {
 __L1__: F,
},  0, 5, 1024 );

trace!(Component6Trace<F> {
 a: [F; 2],
},  0, 5, 1024 );

trace!(Component7Fixed<F> {
 __L1__: F,
},  0, 6, 512 );

trace!(Component7Trace<F> {
 a: [F; 9],
},  0, 6, 512 );

trace!(Table7Fixed<F> {
 A: [F; 9], __L1__: F,
},  0, 7, 512 );

trace!(Table7Trace<F> {
 multiplicity: F,
},  0, 7, 512 );

trace!(Component8Fixed<F> {
 __L1__: F,
},  0, 8, 1024 );

trace!(Component8Trace<F> {
 a: [F; 3],
},  0, 8, 1024 );

trace!(Component9Fixed<F> {
 __L1__: F,
},  0, 9, 1048576 );

trace!(Component9Trace<F> {
 a: [F; 4],
},  0, 9, 1048576 );

trace!(VirtualTable0Fixed<F> {
 UID: [F; 32], column: [F; 128], __L1__: F,
},  0, 10, 32768 );

trace!(VirtualTable0Trace<F> {
 multiplicity: [F; 32],
},  0, 10, 32768 );

trace!(VirtualTable1Fixed<F> {
 UID: [F; 2], column: [F; 2], __L1__: F,
},  0, 11, 32768 );

trace!(VirtualTable1Trace<F> {
 multiplicity: [F; 2],
},  0, 11, 32768 );

trace!(VirtualTable2Fixed<F> {
 UID: [F; 1], column: [F; 6], __L1__: F,
},  0, 12, 32768 );

trace!(VirtualTable2Trace<F> {
 multiplicity: [F; 1],
},  0, 12, 32768 );

values!(Component1AirGroupValues<F> {
 gsum_result: FieldExtension<F>,
});

values!(Component2AirGroupValues<F> {
 gsum_result: FieldExtension<F>,
});

values!(Component3AirGroupValues<F> {
 gsum_result: FieldExtension<F>,
});

values!(Component4AirGroupValues<F> {
 gsum_result: FieldExtension<F>,
});

values!(Component5AirGroupValues<F> {
 gsum_result: FieldExtension<F>,
});

values!(Component6AirGroupValues<F> {
 gsum_result: FieldExtension<F>,
});

values!(Component7AirGroupValues<F> {
 gsum_result: FieldExtension<F>,
});

values!(Table7AirGroupValues<F> {
 gsum_result: FieldExtension<F>,
});

values!(Component8AirGroupValues<F> {
 gsum_result: FieldExtension<F>,
});

values!(Component9AirGroupValues<F> {
 gsum_result: FieldExtension<F>,
});

values!(VirtualTable0AirGroupValues<F> {
 gsum_result: FieldExtension<F>,
});

values!(VirtualTable1AirGroupValues<F> {
 gsum_result: FieldExtension<F>,
});

values!(VirtualTable2AirGroupValues<F> {
 gsum_result: FieldExtension<F>,
});
