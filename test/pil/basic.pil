include "tools.pil"

subproof Main(2**23) {
    expr cols[3];

    col witness a;
    col witness b;
    col witness c;

    
    cols[0] = a;
    cols[1] = b;
    cols[2] = c;
/*
    for (int i = 0; i < length(cols); ++i) {
        const expr _col = cols[i];
        cols[i] * (1 - cols[i]) === 0;
        cols[i] * (1 - cols[i]) * (2 - cols[i]) === 0;
        _col * (1 - _col) * (2 - _col) === 0;
    }
*/  
/*
    a * (1 - b) * (2 - c) === 0;
    a * (1 - a) === 0;
    a * (1 - a) * (2 - a) === 0;
    b * (1 - b) === 0;
    b * (1 - b) * (2 - b) === 0;
    c * (1 - c) === 0;
    c * (1 - c) * (2 - c) === 0;
*/

//    cols[0] * (1 - cols[1]) * (2 - cols[2]) === 0;

    cols[0] * (1 - cols[0]) === 0;
    cols[0] * (1 - cols[0]) * (2 - cols[0]) === 0;
/*
    cols[0] * (1 - cols[0]) * (2 - cols[0]) === 0;
    cols[1] * (1 - cols[1]) === 0;
    cols[1] * (1 - cols[1]) * (2 - cols[1]) === 0;
    cols[2] * (1 - cols[2]) === 0;
    cols[2] * (1 - cols[2]) * (2 - cols[2]) === 0;

    _g(cols[0],cols[1],cols[2]);
    _g(a,b,c);
*/
    // compact_bin_cols(cols);
    // compact_bin_cols([a,b,c]);
}

function _f1(const expr cols[]) {
    for (int i = 0; i < length(cols); ++i) {
        const expr _col = cols[i];
        cols[i] * (1 - cols[i]) === 0;
        cols[i] * (1 - cols[i]) * (2 - cols[i]) === 0;
        _col * (1 - _col) * (2 - _col) === 0;
    }
}

function _f2(const expr cols[]) {
    int i = 0;
    cols[i] * (1 - cols[i]) === 0;
    cols[i] * (1 - cols[i]) * (2 - cols[i]) === 0;
    i = 1;
    cols[i] * (1 - cols[i]) === 0;
    cols[i] * (1 - cols[i]) * (2 - cols[i]) === 0;
    i = 2;
    cols[i] * (1 - cols[i]) === 0;
    cols[i] * (1 - cols[i]) * (2 - cols[i]) === 0;
}

function _f4(const expr cols[]) {
    int i = 0;
    cols[i] * cols[i] === 0;
    cols[i] * cols[i] * cols[i] === 0;
    i = 1;
    cols[i] * cols[i] === 0;
    cols[i] * cols[i] * cols[i] === 0;
    i = 2;
    cols[i] * cols[i] === 0;
    cols[i] * cols[i] * cols[i] === 0;
}

function _f(const expr cols[]) {
    int i = 0;
    cols[0] * (1 - cols[1]) * (2 - cols[2]) === 0;
    cols[0] * (1 - cols[0]) === 0;
    cols[0] * (1 - cols[0]) * (2 - cols[0]) === 0;
    cols[1] * (1 - cols[1]) === 0;
    cols[1] * (1 - cols[1]) * (2 - cols[1]) === 0;
    cols[2] * (1 - cols[2]) === 0;
    cols[2] * (1 - cols[2]) * (2 - cols[2]) === 0;
}

function _g1(const expr col0, const expr col1, const expr col2) {
    int i = 0;
    #pragma dump col0
    col0 * (1 - col0) === 0;
    col0 * (1 - col0) * (2 - col0) === 0;
    col1 * (1 - col1) === 0;
    col1 * (1 - col1) * (2 - col1) === 0;
    col2 * (1 - col2) === 0;
    col2 * (1 - col2) * (2 - col2) === 0;
}

function _g(expr col0, expr col1, expr col2) {
    int i = 0;
    #pragma dump col0
    col0 * (1 - col0) === 0;
    col0 * (1 - col0) * (2 - col0) === 0;
    col1 * (1 - col1) === 0;
    col1 * (1 - col1) * (2 - col1) === 0;
    col2 * (1 - col2) === 0;
    col2 * (1 - col2) * (2 - col2) === 0;
}
