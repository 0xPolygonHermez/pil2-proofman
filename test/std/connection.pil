require "std_connection.pil";
// require "connection_fixed.pil";

// subproof aggregate Connection1(2**12, 2**13) {

//     col witness a,b,c;

//     col fixed S1,S2,S3;
//     if (N == 2**12) {
//         S1 = GROUP12;
//         S2 = GROUP12;
//         S3 = GROUP12;
//     } else if (N == 2**13) {
//         S1 = GROUP13;
//         S2 = GROUP13;
//         S3 = GROUP13;
//     } else {
//         error(`Unsupported N = ${N}`);
//     }

//     // PIL1 Interface
//     connection(1, [a, b, c], [S1, S2, S3]);
// };

subproof aggregate Connection2(2**2) {

    col witness a,b,c,d;

    // int rows[2][2];
    // rows[0][0] = 2;
    // rows[0][1] = 3;
    // rows[1][0] = 0;
    // rows[1][1] = 0;
    // println(rows);

    connection_init(2, [a, b, c]);
    connection_update_one_cell(2, [c,b,c,b], 2**2);
    connection_update_one_cell(2, [c,2,c,3], 2**2);
    connection_connect(2);

    // connection_init(3, [a, b, c]);
    // connection_update_one_cell(2, [c,2,a,3], 2**2);
    // // connection_update_one_cell(2, [[b,3,c,0],[a,1,c,0]], 2**2); // TODO: Fix, it does not work!
    // connection_update_one_cell(2, [b,3,c,0,a,1,c,0], 2**2);
    // connection_connect(3);

    // connection_init(4, [a, b, c, d]);
    // connection_update_one_cell(4, [b,2,d,1,a,3,b,2], 2**2);
    // connection_update_one_cell(4, [c,2,a,1,c,3,b,2], 2**2);
    // connection_connect(4);

    // connection_init(5, [a, b, c, d]);
    // int rows[2][2];
    // rows[0] = [2,3];
    // rows[1] = [0];
    // connection_update_multiple_cells(5, [[d,2,3],[b,0]], 2**2);  // TODO: Fix, it does not work!
    // connection_connect(5);
};