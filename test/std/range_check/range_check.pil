require "std_range_check.pil";

air aggregate RangeCheck1(const int N = 2**3) {

    col witness a1,a2;
    col witness sel1,sel2;

    // Compilation Errors
    // range_check(0, sel1, a1, 1, 0);
    // range_check(0, sel1, a1, 0, 0);
    // range_check(0, sel1, a1, 0, 6);
    // range_check(0, sel1, a1, 0, (PRIME - 1) / 2);
    // range_check(0, sel1, a1, PRIME - 1, PRIME);
    // range_check(0, sel1, a1, -PRIME, -PRIME + 1);

    range_check(0, sel1, a1, 0, 2**8-1);
    range_check(0, sel2, a2, 0, 2**4-1);
    // range_check(0, sel2, a2, 0, 2**16-1);
    // range_check(1, sel1, a1, 0, 2**8-1);
};

// air aggregate RangeCheck2(const int N = 2**12) {

//     col witness a1,a2;
//     col witness sel1,sel2;

//     range_check(0, sel1, a1, 0, 2**8-1);
//     range_check(0, sel1, a1, 0, 2**9-1);
//     range_check(0, sel2, a2, 0, 2**10-1);
// };

// air aggregate RangeCheck3(const int N = 2**12) {

//     col witness a1,a2;
//     col witness sel1,sel2;

//     range_check(0, sel1, a1, 0, 2**4-1);
//     range_check(0, sel1, a1, 0, 2**8-1);
// };

// RangeCheck3();
RangeCheck1();
// RangeCheck2();
// RangeCheck1(N: 2**13);

// air aggregate RangeCheck4(const int N = 2**12) {

//     col witness a1,a2;
//     col witness sel1,sel2;

//     // Edge cases
//     range_check(1, sel1, a1, 127, 2**16);
//     range_check(1, sel1, a1, -1, 2**16);

//     // Positive and predefined ranges
//     range_check(1, sel1, a1, 0, 2**8-1);
//     range_check(1, sel1, a1, 0, 2**16-1);

//     // Positive but non-predefined ranges
//     range_check(1, sel1, a1, 50, 2**7-1);
//     range_check(1, sel1, a1, 127, 2**8);

//     // Negative
//     range_check(1, sel1, a1, -2**7+1, -50);
//     range_check(1, sel1, a1, -2**8+1, -127);
// };

// RangeCheck4();