/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var zkasm_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,10],$V2=[1,12],$V3=[1,13],$V4=[1,46],$V5=[1,28],$V6=[1,30],$V7=[1,14],$V8=[1,15],$V9=[1,17],$Va=[1,38],$Vb=[1,16],$Vc=[1,29],$Vd=[1,19],$Ve=[1,22],$Vf=[1,23],$Vg=[1,24],$Vh=[1,27],$Vi=[1,31],$Vj=[1,45],$Vk=[1,32],$Vl=[1,33],$Vm=[1,34],$Vn=[1,35],$Vo=[1,36],$Vp=[1,37],$Vq=[1,39],$Vr=[1,40],$Vs=[1,41],$Vt=[1,42],$Vu=[1,43],$Vv=[1,44],$Vw=[1,47],$Vx=[1,48],$Vy=[1,49],$Vz=[5,8,13,15,17,19,21,23,24,27,28,30,31,33,36,63,64,65,68,69,86,109,110,111,112,113,114,115,116,117,118,119,120,123,125,126],$VA=[1,56],$VB=[1,57],$VC=[1,58],$VD=[1,59],$VE=[1,64],$VF=[1,65],$VG=[1,66],$VH=[1,67],$VI=[1,72],$VJ=[1,73],$VK=[1,74],$VL=[1,75],$VM=[1,76],$VN=[1,77],$VO=[1,84],$VP=[1,85],$VQ=[1,86],$VR=[1,87],$VS=[1,88],$VT=[1,89],$VU=[1,68],$VV=[1,69],$VW=[1,70],$VX=[1,71],$VY=[1,78],$VZ=[1,79],$V_=[1,80],$V$=[1,81],$V01=[1,82],$V11=[1,83],$V21=[13,15],$V31=[13,15,35,36,59],$V41=[1,100],$V51=[13,15,35,36,37,59],$V61=[13,15,35,36,37,59,70],$V71=[1,109],$V81=[13,70],$V91=[1,136],$Va1=[1,137],$Vb1=[1,134],$Vc1=[1,135],$Vd1=[1,148],$Ve1=[1,144],$Vf1=[1,145],$Vg1=[1,146],$Vh1=[1,147],$Vi1=[1,153],$Vj1=[1,154],$Vk1=[1,158],$Vl1=[1,160],$Vm1=[1,159],$Vn1=[1,161],$Vo1=[1,162],$Vp1=[1,163],$Vq1=[13,15,70],$Vr1=[1,172],$Vs1=[1,173],$Vt1=[22,35,36,57,70],$Vu1=[22,35,36,37,57,70],$Vv1=[57,70],$Vw1=[1,203],$Vx1=[1,204],$Vy1=[1,205],$Vz1=[1,206],$VA1=[1,207],$VB1=[1,208],$VC1=[1,209],$VD1=[1,210],$VE1=[1,211],$VF1=[1,212],$VG1=[1,213],$VH1=[1,214],$VI1=[1,215],$VJ1=[1,216],$VK1=[1,217],$VL1=[1,218],$VM1=[1,219],$VN1=[1,220],$VO1=[1,221],$VP1=[1,222],$VQ1=[5,8,13,15,17,19,21,23,24,27,28,30,31,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,57,63,64,65,68,69,70,86,109,110,111,112,113,114,115,116,117,118,119,120,123,125,126],$VR1=[5,8,13,15,17,19,21,23,24,27,28,30,31,33,63,64,65,68,69,86,109,110,111,112,113,114,115,116,117,118,119,120,123,125,126],$VS1=[5,8,13,15,17,19,21,23,24,27,28,30,31,33,35,36,41,42,43,44,45,46,47,48,49,50,51,52,53,55,57,63,64,65,68,69,70,86,109,110,111,112,113,114,115,116,117,118,119,120,123,125,126],$VT1=[5,8,13,15,17,19,21,23,24,27,28,30,31,33,41,42,43,44,45,46,47,48,49,50,51,52,53,55,57,63,64,65,68,69,70,86,109,110,111,112,113,114,115,116,117,118,119,120,123,125,126],$VU1=[5,8,13,15,17,19,21,23,24,27,28,30,31,33,43,44,45,46,47,48,49,50,51,52,53,55,57,63,64,65,68,69,70,86,109,110,111,112,113,114,115,116,117,118,119,120,123,125,126],$VV1=[5,8,13,15,17,19,21,23,24,27,28,30,31,33,43,44,45,50,51,52,53,55,57,63,64,65,68,69,70,86,109,110,111,112,113,114,115,116,117,118,119,120,123,125,126];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"allStatments":3,"statmentList":4,"EOF":5,"statment":6,"step":7,"LABEL":8,"varDef":9,"constDef":10,"include":11,"command":12,"LF":13,"assignment":14,":":15,"opList":16,"VAR":17,"scope":18,"IDENTIFIER":19,"[":20,"NUMBER":21,"]":22,"CONSTID":23,"CONST":24,"=":25,"nexpr":26,"CONSTL":27,"COMMAND":28,"GLOBAL":29,"CTX":30,"INCLUDE":31,"STRING":32,"NUMBERL":33,"??":34,"+":35,"-":36,"*":37,"**":38,"%":39,"/":40,"<<":41,">>":42,"|":43,"&":44,"^":45,"<":46,">":47,"<=":48,">=":49,"==":50,"!=":51,"&&":52,"||":53,"!":54,"?":55,"(":56,")":57,"inRegsSum":58,"=>":59,"destinationsList":60,"inRegP":61,"inReg":62,"TAG":63,"TAG_0":64,"TAG_BYTE":65,"reg":66,"mem_addr":67,"counter":68,"REFERENCE":69,",":70,"op":71,"MLOAD":72,"addr":73,"F_MLOAD":74,"MSTORE":75,"JMP":76,"jmp_addr":77,"jmpNotCond":78,"jmpCond":79,"jmpNotCondConst":80,"jmpCondConst":81,"CALL":82,"RETURN":83,"ASSERT":84,"REPEAT":85,"RCX":86,"JMPN":87,"JMPC":88,"JMPZ":89,"CALL_Z":90,"CALL_N":91,"CALL_C":92,"JMP_EQ":93,"JMP_LT":94,"JMP_LE":95,"CALL_EQ":96,"CALL_LT":97,"CALL_LE":98,"JMPNC":99,"JMPNZ":100,"CALL_NC":101,"CALL_NZ":102,"JMP_NE":103,"JMP_GT":104,"JMP_GE":105,"CALL_NE":106,"CALL_GT":107,"CALL_GE":108,"A":109,"B":110,"C":111,"D":112,"E":113,"SR":114,"SP":115,"PC":116,"RR":117,"zkPC":118,"STEP":119,"ROTL_C":120,"++":121,"--":122,"SYS":123,"array_index":124,"MEM":125,"STACK":126,"short_const_value":127,"array_index_item":128,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"LABEL",13:"LF",15:":",17:"VAR",19:"IDENTIFIER",20:"[",21:"NUMBER",22:"]",23:"CONSTID",24:"CONST",25:"=",27:"CONSTL",28:"COMMAND",29:"GLOBAL",30:"CTX",31:"INCLUDE",32:"STRING",33:"NUMBERL",34:"??",35:"+",36:"-",37:"*",38:"**",39:"%",40:"/",41:"<<",42:">>",43:"|",44:"&",45:"^",46:"<",47:">",48:"<=",49:">=",50:"==",51:"!=",52:"&&",53:"||",54:"!",55:"?",56:"(",57:")",59:"=>",63:"TAG",64:"TAG_0",65:"TAG_BYTE",68:"counter",69:"REFERENCE",70:",",72:"MLOAD",74:"F_MLOAD",75:"MSTORE",76:"JMP",82:"CALL",83:"RETURN",84:"ASSERT",85:"REPEAT",86:"RCX",87:"JMPN",88:"JMPC",89:"JMPZ",90:"CALL_Z",91:"CALL_N",92:"CALL_C",93:"JMP_EQ",94:"JMP_LT",95:"JMP_LE",96:"CALL_EQ",97:"CALL_LT",98:"CALL_LE",99:"JMPNC",100:"JMPNZ",101:"CALL_NC",102:"CALL_NZ",103:"JMP_NE",104:"JMP_GT",105:"JMP_GE",106:"CALL_NE",107:"CALL_GT",108:"CALL_GE",109:"A",110:"B",111:"C",112:"D",113:"E",114:"SR",115:"SP",116:"PC",117:"RR",118:"zkPC",119:"STEP",120:"ROTL_C",121:"++",122:"--",123:"SYS",125:"MEM",126:"STACK"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,4],[7,2],[7,3],[9,3],[9,6],[9,6],[10,4],[10,4],[12,1],[18,1],[18,1],[11,2],[26,1],[26,1],[26,1],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,5],[26,3],[14,3],[14,1],[58,3],[58,3],[58,2],[58,1],[61,3],[61,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,3],[62,3],[62,1],[62,1],[62,1],[62,1],[60,3],[60,3],[60,1],[60,1],[16,3],[16,1],[71,4],[71,4],[71,4],[71,4],[71,4],[71,6],[71,4],[71,6],[71,6],[71,8],[71,6],[71,8],[71,4],[71,1],[71,1],[71,4],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[81,1],[81,1],[81,1],[81,1],[81,1],[81,1],[78,1],[78,1],[78,1],[78,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[73,1],[73,3],[73,3],[73,2],[73,2],[73,3],[73,3],[73,3],[73,4],[73,4],[73,4],[73,4],[73,1],[73,3],[73,3],[73,3],[77,1],[77,1],[77,1],[77,3],[77,3],[127,1],[127,1],[124,3],[124,3],[124,1],[128,1],[128,1],[128,1],[128,3],[128,3],[128,3],[128,3],[67,1],[67,4],[67,4],[67,4],[67,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            this.$ = $$[$0-1];
            return this.$;
        
break;
case 2:

            if ($$[$0]) $$[$0-1].push($$[$0]);
            this.$ = $$[$0-1];
        
break;
case 3:

            if ($$[$0]) {
                this.$ = [$$[$0]];
            } else {
                this.$=[];
            }
        
break;
case 4: case 6: case 7: case 8: case 9:

            this.$ = $$[$0];
        
break;
case 5:

            this.$ = {type: "label", identifier: $$[$0]};
            setLine(this.$, _$[$0])

        
break;
case 10:

            this.$ = null;
        
break;
case 11:

            this.$ = {type: "step", assignment: $$[$0-3], ops: $$[$0-1]};
            setLine(this.$, _$[$0-3])
        
break;
case 12:

            this.$ = {type: "step", assignment: $$[$0-1], ops: []};
            setLine(this.$, _$[$0-1])
        
break;
case 13:

            this.$ = {type: "step", assignment: null, ops: $$[$0-1]}
            setLine(this.$, _$[$0-2])
        
break;
case 14:

            this.$ = {type: "var", scope: $$[$0-1], name: $$[$0], count: 1 }
        
break;
case 15: case 16:

            this.$ = {type: "var", scope: $$[$0-4], name: $$[$0-3], count: $$[$0-1] }
        
break;
case 17:
            
            // yy.parser.defineConstant($$[$0-2], 'CONST', $$[$0], _$[$0-3].first_line);
            this.$ = {type: "constdef", name: $$[$0-2], value: $$[$0]}
            setLine(this.$, _$[$0-3]);
        
break;
case 18:

            // yy.parser.defineConstant($$[$0-2], 'CONSTL', $$[$0], _$[$0-3].first_line);
            this.$ = {type: "constldef", name: $$[$0-2], value: $$[$0]}
            setLine(this.$, _$[$0-3]);
        
break;
case 19:

            this.$ = {type: "command", cmd: $$[$0]}
        
break;
case 22:

            this.$ = {type: "include", file: $$[$0]}
            setLine(this.$, _$[$0-1])
        
break;
case 23: case 24:

            this.$ = {type: 'CONSTL' , value: $$[$0]}
        
break;
case 25: case 68:

            this.$ = {type: 'CONSTID' , identifier: $$[$0]}
        
break;
case 26:

            this.$ = {type: $$[$0-1], values: [$$[$0]] , identifier: $$[$0-2]}
        
break;
case 27: case 28: case 29: case 30: case 31: case 32: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46:

            this.$ = {type: $$[$0-1], values: [$$[$0-2], $$[$0]]}
        
break;
case 33: case 47:

            this.$ = {type: $$[$0-1], values: [$$[$0]]}
        
break;
case 48:

            this.$ = {type: $$[$0-3], values: [$$[$0-4], $$[$0-2], $$[$0]]}
        
break;
case 49:

            this.$ = $$[$0-1]
        
break;
case 50:

            this.$ = {in: $$[$0-2], out: $$[$0]}
        
break;
case 51:

            this.$ = {in: $$[$0], out: []}
        
break;
case 52:

            this.$ = {type: 'add', values: [$$[$0-2], $$[$0]]}
        
break;
case 53:

            this.$ = {type: 'sub', values: [$$[$0-2], $$[$0]]}
        
break;
case 54:

            this.$ = {type: 'neg', values: [$$[$0]]}
        
break;
case 55: case 57: case 153:

            this.$ = $$[$0]
        
break;
case 56:

            this.$ = {type: 'mul', values: [$$[$0-2], $$[$0]]}
        
break;
case 58:

            this.$ = {type: 'TAG' , tag: $$[$0] }
        
break;
case 59:

            this.$ = {type: 'TAG_0' , tag: $$[$0] }
        
break;
case 60:

            this.$ = {type: 'TAG_BYTE' , tag: $$[$0] }
        
break;
case 61:

            this.$ = {type: 'REG' , reg: $$[$0]}
        
break;
case 62:

            this.$ = {type: 'F_MLOAD', addr: $$[$0]}
            normalizeArrayIndex(this.$.addr, 'memUseAddrRel');
        
break;
case 63:

            this.$ = {type: 'COUNTER', counter: $$[$0]}
        
break;
case 64:

            this.$ = {type: "exp", values: [$$[$0-2], $$[$0]]}
        
break;
case 65:

            this.$ = {type: "expl", values: [$$[$0-2], $$[$0]]}
        
break;
case 66:

            this.$ = {type: 'CONST' , const: $$[$0]}
        
break;
case 67:

            this.$ = {type: 'CONSTL' , const: $$[$0]}
        
break;
case 69:

            this.$ = {type: 'reference', identifier: $$[$0]}
        
break;
case 70:

            $$[$0-2].push({type: 'REG', reg:$$[$0]})
        
break;
case 71:

            normalizeArrayIndex($$[$0]);
            $$[$0-2].push({type: 'MSTORE', addr:{...$$[$0], assumeFree: 0}})
        
break;
case 72:

            normalizeArrayIndex($$[$0]);
            this.$ = [{type: 'MSTORE', addr:{...$$[$0], assumeFree: 0}}]
        
break;
case 73:

            this.$ = [{type: 'REG', reg:$$[$0]}]
        
break;
case 74:

            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2]
        
break;
case 75:

            this.$ = [$$[$0]]
        
break;
case 76:

            normalizeArrayIndex($$[$0-1], 'memUseAddrRel');            
            this.$ = { offset: 0, ...$$[$0-1], mOp: 1, mWR: 0, assumeFree: 0 };
        
break;
case 77:

            normalizeArrayIndex($$[$0-1], 'memUseAddrRel');
            this.$ = { offset: 0, ...$$[$0-1], mOp: 1, mWR: 0, assumeFree: 1 };
        
break;
case 78:

            normalizeArrayIndex($$[$0-1], 'memUseAddrRel');
            this.$ = { offset: 0, ...$$[$0-1], mOp: 1, mWR: 1, assumeFree: 0 };
        
break;
case 79:

            this.$ = {...JMP_FLAGS, JMP: 1, ...applyAddrRel('jmp', $$[$0-1]) }
        
break;
case 80:

            this.$ = { ...JMP_FLAGS,  ...$$[$0-3], ...applyAddrRel('else', $$[$0-1]), jmpAddr: 0, jmpAddrLabel: 'next' }
        
break;
case 81:

            {
                let _else = applyAddrRel('else', $$[$0-3]);
                let _jmp = applyAddrRel('jmp', $$[$0-1]);

                if (_jmp.jmpUseAddrRel && _else.elseUseAddrRel && 
                    (!lodash.isEqual(_jmp.ind, _else.ind) || !lodash.isEqual(_jmp.indRR, _else.indRR))) {
                        this.compiler._error(`Diferent relative address between jmp and else addresses`);
                }
                this.$ = { ...JMP_FLAGS, ...$$[$0-5], ..._jmp, ..._else }            
            }
        
break;
case 82:
   
            this.$ = {...JMP_FLAGS, ...$$[$0-3], ...applyAddrRel('jmp', $$[$0-1]), elseAddr: 0, elseAddrLabel: 'next' };
        
break;
case 83:

            {
                let _else = applyAddrRel('else', $$[$0-1]);
                let _jmp = applyAddrRel('jmp', $$[$0-3]);

                if (_jmp.jmpUseAddrRel && _else.elseUseAddrRel && 
                    (!lodash.isEqual(_jmp.ind, _else.ind) || !lodash.isEqual(_jmp.indRR, _else.indRR))) {
                        this.compiler._error(`Diferent relative address between jmp and else addresses`);
                }
                this.$ = {...JMP_FLAGS, ...$$[$0-5], ..._jmp, ..._else };
            }
        
break;
case 84:

            this.$ = { ...JMP_FLAGS,  ...$$[$0-5], ...applyAddrRel('else', $$[$0-1]), jmpAddr: 0, jmpAddrLabel: 'next', ...applyCondConst($$[$0-5], $$[$0-3])};
        
break;
case 85:

            {
                let _else = applyAddrRel('else', $$[$0-3]);
                let _jmp = applyAddrRel('jmp', $$[$0-1]);

                if (_jmp.jmpUseAddrRel && _else.elseUseAddrRel && 
                    (!lodash.isEqual(_jmp.ind, _else.ind) || !lodash.isEqual(_jmp.indRR, _else.indRR))) {
                        this.compiler._error(`Diferent relative address between jmp and else addresses`);
                }
                this.$ = { ...JMP_FLAGS, ...$$[$0-7], ..._jmp, ..._else, ...applyCondConst($$[$0-7], $$[$0-5])}

            }
        
break;
case 86:
   
            this.$ = {...JMP_FLAGS, ...$$[$0-5], ...applyAddrRel('jmp', $$[$0-1]), elseAddr: 0, elseAddrLabel: 'next', 
                  ...applyCondConst($$[$0-5], $$[$0-3])};
        
break;
case 87:

            {
                let _else = applyAddrRel('else', $$[$0-1]);
                let _jmp = applyAddrRel('jmp', $$[$0-3]);

                if (_jmp.jmpUseAddrRel && _else.elseUseAddrRel && 
                    (!lodash.isEqual(_jmp.ind, _else.ind) || !lodash.isEqual(_jmp.indRR, _else.indRR))) {
                        this.compiler._error(`Diferent relative address between jmp and else addresses`);
                }
                this.$ = {...JMP_FLAGS, ...$$[$0-7], ..._jmp, ..._else, ...applyCondConst($$[$0-7], $$[$0-5])}
            }
        
break;
case 88:

            this.$ = {...JMP_FLAGS, JMP: 1, call: 1, ...applyAddrRel('jmp', $$[$0-1]) }
        
break;
case 89:

            this.$ = {JMP: 0, JMPC: 0, JMPN: 0,  call: 0, return: 1}
        
break;
case 90:

            this.$ = {assert: 1}
        
break;
case 91:

            this.$ = { repeat: 1 }
        
break;
case 92:
 this.$ = { JMPN: 1, free0IsByte: 0 } 
break;
case 93: case 104:
 this.$ = { JMPC: 1 } 
break;
case 94: case 105:
 this.$ = { JMPZ: 1 } 
break;
case 95: case 107:
 this.$ = { JMPZ: 1, call: 1 } 
break;
case 96:
 this.$ = { JMPN: 1, call: 1, free0IsByte: 0 } 
break;
case 97: case 106:
 this.$ = { JMPC: 1, call: 1 } 
break;
case 98: case 108:
 this.$ = { JMPZ: 1, condConst:  0 } 
break;
case 99: case 110:
 this.$ = { JMPN: 1, condConst:  0, free0IsByte: 0 } 
break;
case 100: case 109:
 this.$ = { JMPN: 1, condConst: -1, free0IsByte: 0 } 
break;
case 101: case 111:
 this.$ = { JMPZ: 1, condConst:  0, call: 1 } 
break;
case 102: case 113:
 this.$ = { JMPN: 1, condConst:  0, call: 1, free0IsByte: 0 } 
break;
case 103: case 112:
 this.$ = { JMPN: 1, condConst: -1, call: 1, free0IsByte: 0 } 
break;
case 128:

            this.$ = { isStack: 1, isMem:0, incStack:0, offset: 0, useCTX: 1}
        
break;
case 129:

            this.$ = { isStack: 1, isMem:0, incStack: 0, offset: $$[$0], useCTX: 1}
        
break;
case 130:

            this.$ = { isStack: 1, isMem:0, incStack: 0, offset: -$$[$0], useCTX: 1}
        
break;
case 131:

            this.$ = { isStack: 1, isMem:0, incStack: 1, offset: 0, useCTX: 1}
        
break;
case 132:

            this.$ = { isStack: 1, isMem:0, incStack: -1, offset: 0, useCTX: 1}
        
break;
case 133:
            
            this.$ = { isStack: 0, isMem:0, incStack: 0, ...$$[$0] }
            normalizeArrayIndex(this.$);
        
break;
case 134:

            this.$ = { isStack: 0, isMem: 1, incStack: 0, useCTX: 1, ...$$[$0] }
            normalizeArrayIndex(this.$);
        
break;
case 135:

            this.$ = { isStack: 1, isMem: 0, incStack: 0, useCTX: 1, ...$$[$0] }
            normalizeArrayIndex(this.$);
        
break;
case 136:

            this.$ = { isStack: 0, isMem:0, incStack: 0, ...$$[$0-1] }
            normalizeArrayIndex(this.$);
        
break;
case 137:

            this.$ = { isStack: 0, isMem: 1, incStack: 0, useCTX: 1, ...$$[$0-1] }
            normalizeArrayIndex(this.$);
        
break;
case 138:

            this.$ = { isStack: 1, isMem: 0, incStack: 0, useCTX: 1, ...$$[$0-1] }
            normalizeArrayIndex(this.$);
        
break;
case 139:

            this.$ = { offsetLabel: $$[$0-3], ...$$[$0-1] }
            normalizeArrayIndex(this.$);
        
break;
case 140:

            this.$ = { offsetLabel: $$[$0], offset: 0 }
        
break;
case 141:

            this.$ = { offsetLabel: $$[$0-2], offset: 0, memUseAddrRel: 1, ind: 0, indRR: 1 }
        
break;
case 142:

            this.$ = { offsetLabel: $$[$0-2], offset: 0, memUseAddrRel: 1, ind: 1, indRR: 0 }
        
break;
case 143:

            this.$ = { offsetLabel: $$[$0-2], offset: $$[$0] }
        
break;
case 144:

            this.$ = { ...$$[$0] }
        
break;
case 145: case 161:

            this.$ = { offsetLabel: $$[$0] }
        
break;
case 146:
   
            this.$ = { offsetLabel: $$[$0] }
        
break;
case 147:
   
            {
                let _aindex = { ...$$[$0] };
                delete _aindex._fk;
                this.$ = { offsetLabel: $$[$0-2], ..._aindex }
            }
        
break;
case 148:

            {
                let _aindex = { ...$$[$0] };
                _aindex[_aindex._fk] = { type: 'neg', values: [_aindex[_aindex._fk]]};
                delete _aindex._fk;
                this.$ = { offsetLabel: $$[$0-2], ..._aindex }
            }
        
break;
case 149:

            this.$ = {type: 'CONST' , const: Number($$[$0]) }
        
break;
case 150:

            this.$ = {type: 'CONSTID' , identifier: $$[$0] }
        
break;
case 151:

            Object.keys($$[$0]).forEach(k => {
                if (!k.startsWith('_') && (k !== 'useAddrRel' || !lodash.isEqual($$[$0-2][k], $$[$0][k]))) {
                    if ($$[$0-2][k] && $$[$0-2][k].const !== 0) {
                        this.compiler._error(`Property ${k} already used`);
                    }
                    $$[$0-2][k] = $$[$0][k];
                }
            });
            this.$ = $$[$0-2];
        
break;
case 152:

            Object.keys($$[$0]).forEach(k => {
                if (!k.startsWith('_') && (k !== 'useAddrRel' || !lodash.isEqual($$[$0-2][k], $$[$0][k]))) {
                    if ($$[$0-2][k] && $$[$0-2][k].const !== 0) {
                        this.compiler._error(`Property ${k} already used`);
                    }
                    if (k === $$[$0]._fk) {
                        $$[$0-2][k] = {type: 'neg', values: [$$[$0][k]]};
                    } else {
                        $$[$0-2][k] = $$[$0][k];
                    }
                }
            });
            this.$ = $$[$0-2];
        
break;
case 154:

            this.$ = { _fk: 'offset', offset: $$[$0] }
        
break;
case 155:

            this.$ = { _fk: 'ind', useAddrRel: 1, ind: 1 }
        
break;
case 156:

            this.$ = { _fk: 'indRR', useAddrRel: 1, indRR: 1 }            
        
break;
case 157:

            this.$ = { _fk: 'ind', useAddrRel: 1, ind: $$[$0-2] }
        
break;
case 158:

            this.$ = { _fk: 'indRR', useAddrRel: 1, indRR: $$[$0-2] }
        
break;
case 159:

            this.$ = { _fk: 'ind', useAddrRel: 1, ind: $$[$0] }
        
break;
case 160:

            this.$ = { _fk: 'indRR', useAddrRel: 1, indRR: $$[$0] }
        
break;
case 162:

            this.$ = { isStack: 0, isMem:0, incStack: 0, ...$$[$0-1] }
            delete this.$._fk;
        
break;
case 163:

            this.$ = { isStack: 0, isMem: 1, incStack: 0, useCTX: 1, ...$$[$0-1] }
            delete this.$._fk;
        
break;
case 164:

            this.$ = { isStack: 1, isMem: 0, incStack: 0, useCTX: 1, ...$$[$0-1] }
            delete this.$._fk;
        
break;
case 165:

            this.$ = { offsetLabel: $$[$0-3], ...$$[$0-1] }
            delete this.$._fk;
        
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,9:6,10:7,11:8,12:9,13:$V1,14:11,15:$V2,17:$V3,19:$V4,21:$V5,23:$V6,24:$V7,27:$V8,28:$V9,30:$Va,31:$Vb,33:$Vc,36:$Vd,58:18,61:20,62:21,63:$Ve,64:$Vf,65:$Vg,66:25,67:26,68:$Vh,69:$Vi,86:$Vj,109:$Vk,110:$Vl,111:$Vm,112:$Vn,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,123:$Vw,125:$Vx,126:$Vy},{1:[3]},{5:[1,50],6:51,7:4,8:$V0,9:6,10:7,11:8,12:9,13:$V1,14:11,15:$V2,17:$V3,19:$V4,21:$V5,23:$V6,24:$V7,27:$V8,28:$V9,30:$Va,31:$Vb,33:$Vc,36:$Vd,58:18,61:20,62:21,63:$Ve,64:$Vf,65:$Vg,66:25,67:26,68:$Vh,69:$Vi,86:$Vj,109:$Vk,110:$Vl,111:$Vm,112:$Vn,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,123:$Vw,125:$Vx,126:$Vy},o($Vz,[2,3]),o($Vz,[2,4]),o($Vz,[2,5]),o($Vz,[2,6]),o($Vz,[2,7]),o($Vz,[2,8]),o($Vz,[2,9]),o($Vz,[2,10]),{13:[1,53],15:[1,52]},{16:54,71:55,72:$VA,74:$VB,75:$VC,76:$VD,78:60,79:61,80:62,81:63,82:$VE,83:$VF,84:$VG,85:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX,103:$VY,104:$VZ,105:$V_,106:$V$,107:$V01,108:$V11},{18:90,29:[1,91],30:[1,92]},{23:[1,93]},{23:[1,94]},{32:[1,95]},o($Vz,[2,19]),o($V21,[2,51],{35:[1,97],36:[1,98],59:[1,96]}),{19:$V4,21:$V5,23:$V6,30:$Va,33:$Vc,61:99,62:21,63:$Ve,64:$Vf,65:$Vg,66:25,67:26,68:$Vh,69:$Vi,86:$Vj,109:$Vk,110:$Vl,111:$Vm,112:$Vn,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,123:$Vw,125:$Vx,126:$Vy},o($V31,[2,55],{37:$V41}),o($V51,[2,57]),o($V51,[2,58]),o($V51,[2,59]),o($V51,[2,60]),o($V51,[2,61]),o($V51,[2,62]),o($V51,[2,63]),o($V51,[2,66],{38:[1,101]}),o($V51,[2,67],{38:[1,102]}),o($V51,[2,68]),o($V51,[2,69]),o($V61,[2,114]),o($V61,[2,115]),o($V61,[2,116]),o($V61,[2,117]),o($V61,[2,118]),o($V61,[2,119]),o($V61,[2,120]),o($V61,[2,121]),o($V61,[2,122]),o($V61,[2,123]),o($V61,[2,124]),o($V61,[2,125]),o($V61,[2,126]),o($V61,[2,127]),o($V61,[2,161],{20:[1,103]}),{20:[1,104]},{20:[1,105]},{20:[1,106]},{1:[2,1]},o($Vz,[2,2]),{16:107,71:55,72:$VA,74:$VB,75:$VC,76:$VD,78:60,79:61,80:62,81:63,82:$VE,83:$VF,84:$VG,85:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX,103:$VY,104:$VZ,105:$V_,106:$V$,107:$V01,108:$V11},o($Vz,[2,12]),{13:[1,108],70:$V71},o($V81,[2,75]),{56:[1,110]},{56:[1,111]},{56:[1,112]},{56:[1,113]},{56:[1,114]},{56:[1,115]},{56:[1,116]},{56:[1,117]},{56:[1,118]},o($V81,[2,89]),o($V81,[2,90]),{56:[1,119]},{56:[2,104]},{56:[2,105]},{56:[2,106]},{56:[2,107]},{56:[2,92]},{56:[2,93]},{56:[2,94]},{56:[2,95]},{56:[2,96]},{56:[2,97]},{56:[2,108]},{56:[2,109]},{56:[2,110]},{56:[2,111]},{56:[2,112]},{56:[2,113]},{56:[2,98]},{56:[2,99]},{56:[2,100]},{56:[2,101]},{56:[2,102]},{56:[2,103]},{19:[1,120]},{19:[2,20]},{19:[2,21]},{25:[1,121]},{25:[1,122]},o($Vz,[2,22]),{19:$V4,30:$Va,60:123,66:125,67:124,86:$Vj,109:$Vk,110:$Vl,111:$Vm,112:$Vn,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,123:$Vw,125:$Vx,126:$Vy},{19:$V4,21:$V5,23:$V6,30:$Va,33:$Vc,61:126,62:21,63:$Ve,64:$Vf,65:$Vg,66:25,67:26,68:$Vh,69:$Vi,86:$Vj,109:$Vk,110:$Vl,111:$Vm,112:$Vn,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,123:$Vw,125:$Vx,126:$Vy},{19:$V4,21:$V5,23:$V6,30:$Va,33:$Vc,61:127,62:21,63:$Ve,64:$Vf,65:$Vg,66:25,67:26,68:$Vh,69:$Vi,86:$Vj,109:$Vk,110:$Vl,111:$Vm,112:$Vn,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,123:$Vw,125:$Vx,126:$Vy},o($V31,[2,54],{37:$V41}),{19:$V4,21:$V5,23:$V6,30:$Va,33:$Vc,62:128,63:$Ve,64:$Vf,65:$Vg,66:25,67:26,68:$Vh,69:$Vi,86:$Vj,109:$Vk,110:$Vl,111:$Vm,112:$Vn,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,123:$Vw,125:$Vx,126:$Vy},{21:[1,129]},{33:[1,130]},{21:$V91,23:$Va1,113:$Vb1,117:$Vc1,124:131,127:133,128:132},{21:$V91,23:$Va1,113:$Vb1,117:$Vc1,124:138,127:133,128:132},{21:$V91,23:$Va1,113:$Vb1,117:$Vc1,124:139,127:133,128:132},{21:$V91,23:$Va1,113:$Vb1,117:$Vc1,124:140,127:133,128:132},{13:[1,141],70:$V71},o($Vz,[2,13]),{71:142,72:$VA,74:$VB,75:$VC,76:$VD,78:60,79:61,80:62,81:63,82:$VE,83:$VF,84:$VG,85:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX,103:$VY,104:$VZ,105:$V_,106:$V$,107:$V01,108:$V11},{19:$Vd1,73:143,115:$Ve1,123:$Vf1,125:$Vg1,126:$Vh1},{19:$Vd1,73:149,115:$Ve1,123:$Vf1,125:$Vg1,126:$Vh1},{19:$Vd1,73:150,115:$Ve1,123:$Vf1,125:$Vg1,126:$Vh1},{19:$Vi1,21:$V91,23:$Va1,69:$Vj1,77:151,113:$Vb1,117:$Vc1,124:152,127:133,128:132},{19:$Vi1,21:$V91,23:$Va1,69:$Vj1,77:155,113:$Vb1,117:$Vc1,124:152,127:133,128:132},{19:$Vi1,21:$V91,23:$Va1,69:$Vj1,77:156,113:$Vb1,117:$Vc1,124:152,127:133,128:132},{21:$Vk1,23:$Vl1,26:157,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},{21:$Vk1,23:$Vl1,26:164,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},{19:$Vi1,21:$V91,23:$Va1,69:$Vj1,77:165,113:$Vb1,117:$Vc1,124:152,127:133,128:132},{86:[1,166]},o($Vz,[2,14],{20:[1,167]}),{21:$Vk1,23:$Vl1,26:168,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},{21:$Vk1,23:$Vl1,26:169,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},o($V21,[2,50],{70:[1,170]}),o($Vq1,[2,72]),o($Vq1,[2,73]),o($V31,[2,52],{37:$V41}),o($V31,[2,53],{37:$V41}),o($V51,[2,56]),o($V51,[2,64]),o($V51,[2,65]),{22:[1,171],35:$Vr1,36:$Vs1},o($Vt1,[2,153]),o($Vt1,[2,154],{37:[1,174]}),o($Vt1,[2,155],{37:[1,175]}),o($Vt1,[2,156],{37:[1,176]}),o($Vu1,[2,149]),o($Vu1,[2,150]),{22:[1,177],35:$Vr1,36:$Vs1},{22:[1,178],35:$Vr1,36:$Vs1},{22:[1,179],35:$Vr1,36:$Vs1},o($Vz,[2,11]),o($V81,[2,74]),{57:[1,180]},{35:[1,181],36:[1,182],57:[2,128],121:[1,183],122:[1,184]},{15:[1,185],20:[1,186]},{15:[1,187],20:[1,188]},{15:[1,189],20:[1,190]},{20:[1,191],35:[1,192],57:[2,140]},{57:[1,193]},{57:[1,194]},{57:[1,195]},o($Vv1,[2,144],{35:$Vr1,36:$Vs1}),o($Vv1,[2,145]),o($Vv1,[2,146],{35:[1,196],36:[1,197]}),{57:[1,198],70:[1,199]},{57:[1,200],70:[1,201]},{35:$Vw1,36:$Vx1,37:$Vy1,38:$Vz1,39:$VA1,40:$VB1,41:$VC1,42:$VD1,43:$VE1,44:$VF1,45:$VG1,46:$VH1,47:$VI1,48:$VJ1,49:$VK1,50:$VL1,51:$VM1,52:$VN1,53:$VO1,55:$VP1,70:[1,202]},o($VQ1,[2,23]),o($VQ1,[2,24]),o($VQ1,[2,25],{34:[1,223]}),{21:$Vk1,23:$Vl1,26:224,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},{21:$Vk1,23:$Vl1,26:225,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},{21:$Vk1,23:$Vl1,26:226,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},{35:$Vw1,36:$Vx1,37:$Vy1,38:$Vz1,39:$VA1,40:$VB1,41:$VC1,42:$VD1,43:$VE1,44:$VF1,45:$VG1,46:$VH1,47:$VI1,48:$VJ1,49:$VK1,50:$VL1,51:$VM1,52:$VN1,53:$VO1,55:$VP1,70:[1,227]},{57:[1,228]},{57:[1,229]},{21:[1,230],23:[1,231]},o($VR1,[2,17],{35:$Vw1,36:$Vx1,37:$Vy1,38:$Vz1,39:$VA1,40:$VB1,41:$VC1,42:$VD1,43:$VE1,44:$VF1,45:$VG1,46:$VH1,47:$VI1,48:$VJ1,49:$VK1,50:$VL1,51:$VM1,52:$VN1,53:$VO1,55:$VP1}),o($VR1,[2,18],{35:$Vw1,36:$Vx1,37:$Vy1,38:$Vz1,39:$VA1,40:$VB1,41:$VC1,42:$VD1,43:$VE1,44:$VF1,45:$VG1,46:$VH1,47:$VI1,48:$VJ1,49:$VK1,50:$VL1,51:$VM1,52:$VN1,53:$VO1,55:$VP1}),{19:$V4,30:$Va,66:232,67:233,86:$Vj,109:$Vk,110:$Vl,111:$Vm,112:$Vn,113:$Vo,114:$Vp,115:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,123:$Vw,125:$Vx,126:$Vy},o($V61,[2,165]),{21:$V91,23:$Va1,113:$Vb1,117:$Vc1,127:133,128:234},{21:$V91,23:$Va1,113:$Vb1,117:$Vc1,127:133,128:235},{113:[1,236],117:[1,237]},{21:$V91,23:$Va1,127:238},{21:$V91,23:$Va1,127:239},o($V61,[2,162]),o($V61,[2,163]),o($V61,[2,164]),o($V81,[2,76]),{21:[1,240]},{21:[1,241]},{57:[2,131]},{57:[2,132]},{21:$V91,23:$Va1,113:$Vb1,117:$Vc1,124:242,127:133,128:132},{21:$V91,23:$Va1,113:$Vb1,117:$Vc1,124:243,127:133,128:132},{21:$V91,23:$Va1,113:$Vb1,117:$Vc1,124:244,127:133,128:132},{21:$V91,23:$Va1,113:$Vb1,117:$Vc1,124:245,127:133,128:132},{21:$V91,23:$Va1,113:$Vb1,117:$Vc1,124:246,127:133,128:132},{21:$V91,23:$Va1,113:$Vb1,117:$Vc1,124:247,127:133,128:132},{21:$V91,23:$Va1,113:$Vb1,117:$Vc1,124:248,127:133,128:132},{21:[1,251],113:[1,250],117:[1,249]},o($V81,[2,77]),o($V81,[2,78]),o($V81,[2,79]),{21:$V91,23:$Va1,113:$Vb1,117:$Vc1,124:252,127:133,128:132},{21:$V91,23:$Va1,113:$Vb1,117:$Vc1,124:253,127:133,128:132},o($V81,[2,80]),{19:$Vi1,21:$V91,23:$Va1,69:$Vj1,77:254,113:$Vb1,117:$Vc1,124:152,127:133,128:132},o($V81,[2,82]),{19:$Vi1,21:$V91,23:$Va1,69:$Vj1,77:255,113:$Vb1,117:$Vc1,124:152,127:133,128:132},{19:$Vi1,21:$V91,23:$Va1,69:$Vj1,77:256,113:$Vb1,117:$Vc1,124:152,127:133,128:132},{21:$Vk1,23:$Vl1,26:257,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},{21:$Vk1,23:$Vl1,26:258,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},{21:$Vk1,23:$Vl1,26:259,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},{21:$Vk1,23:$Vl1,26:260,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},{21:$Vk1,23:$Vl1,26:261,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},{21:$Vk1,23:$Vl1,26:262,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},{21:$Vk1,23:$Vl1,26:263,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},{21:$Vk1,23:$Vl1,26:264,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},{21:$Vk1,23:$Vl1,26:265,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},{21:$Vk1,23:$Vl1,26:266,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},{21:$Vk1,23:$Vl1,26:267,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},{21:$Vk1,23:$Vl1,26:268,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},{21:$Vk1,23:$Vl1,26:269,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},{21:$Vk1,23:$Vl1,26:270,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},{21:$Vk1,23:$Vl1,26:271,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},{21:$Vk1,23:$Vl1,26:272,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},{21:$Vk1,23:$Vl1,26:273,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},{21:$Vk1,23:$Vl1,26:274,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},{21:$Vk1,23:$Vl1,26:275,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},{21:$Vk1,23:$Vl1,26:276,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},{21:$Vk1,23:$Vl1,26:277,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},o($VS1,[2,33],{37:$Vy1,38:$Vz1,39:$VA1,40:$VB1}),o($VQ1,[2,47]),{35:$Vw1,36:$Vx1,37:$Vy1,38:$Vz1,39:$VA1,40:$VB1,41:$VC1,42:$VD1,43:$VE1,44:$VF1,45:$VG1,46:$VH1,47:$VI1,48:$VJ1,49:$VK1,50:$VL1,51:$VM1,52:$VN1,53:$VO1,55:$VP1,57:[1,278]},{19:$Vi1,21:$V91,23:$Va1,69:$Vj1,77:279,113:$Vb1,117:$Vc1,124:152,127:133,128:132},o($V81,[2,88]),o($V81,[2,91]),{22:[1,280]},{22:[1,281]},o($Vq1,[2,70]),o($Vq1,[2,71]),o($Vt1,[2,151]),o($Vt1,[2,152]),o($Vt1,[2,157]),o($Vt1,[2,158]),o($Vt1,[2,159]),o($Vt1,[2,160]),{57:[2,129]},{57:[2,130]},{35:$Vr1,36:$Vs1,57:[2,133]},{22:[1,282],35:$Vr1,36:$Vs1},{35:$Vr1,36:$Vs1,57:[2,134]},{22:[1,283],35:$Vr1,36:$Vs1},{35:$Vr1,36:$Vs1,57:[2,135]},{22:[1,284],35:$Vr1,36:$Vs1},{22:[1,285],35:$Vr1,36:$Vs1},{57:[2,141]},{57:[2,142]},{57:[2,143]},o($Vv1,[2,147],{35:$Vr1,36:$Vs1}),o($Vv1,[2,148],{35:$Vr1,36:$Vs1}),{57:[1,286]},{57:[1,287]},{57:[1,288],70:[1,289]},o($VS1,[2,27],{37:$Vy1,38:$Vz1,39:$VA1,40:$VB1}),o($VS1,[2,28],{37:$Vy1,38:$Vz1,39:$VA1,40:$VB1}),o($VQ1,[2,29]),o($VQ1,[2,30]),o($VQ1,[2,31]),o($VQ1,[2,32]),o($VT1,[2,34],{35:$Vw1,36:$Vx1,37:$Vy1,38:$Vz1,39:$VA1,40:$VB1}),o($VT1,[2,35],{35:$Vw1,36:$Vx1,37:$Vy1,38:$Vz1,39:$VA1,40:$VB1}),o([5,8,13,15,17,19,21,23,24,27,28,30,31,33,43,52,53,55,57,63,64,65,68,69,70,86,109,110,111,112,113,114,115,116,117,118,119,120,123,125,126],[2,36],{35:$Vw1,36:$Vx1,37:$Vy1,38:$Vz1,39:$VA1,40:$VB1,41:$VC1,42:$VD1,44:$VF1,45:$VG1,46:$VH1,47:$VI1,48:$VJ1,49:$VK1,50:$VL1,51:$VM1}),o([5,8,13,15,17,19,21,23,24,27,28,30,31,33,43,44,45,52,53,55,57,63,64,65,68,69,70,86,109,110,111,112,113,114,115,116,117,118,119,120,123,125,126],[2,37],{35:$Vw1,36:$Vx1,37:$Vy1,38:$Vz1,39:$VA1,40:$VB1,41:$VC1,42:$VD1,46:$VH1,47:$VI1,48:$VJ1,49:$VK1,50:$VL1,51:$VM1}),o([5,8,13,15,17,19,21,23,24,27,28,30,31,33,43,45,52,53,55,57,63,64,65,68,69,70,86,109,110,111,112,113,114,115,116,117,118,119,120,123,125,126],[2,38],{35:$Vw1,36:$Vx1,37:$Vy1,38:$Vz1,39:$VA1,40:$VB1,41:$VC1,42:$VD1,44:$VF1,46:$VH1,47:$VI1,48:$VJ1,49:$VK1,50:$VL1,51:$VM1}),o($VU1,[2,39],{35:$Vw1,36:$Vx1,37:$Vy1,38:$Vz1,39:$VA1,40:$VB1,41:$VC1,42:$VD1}),o($VU1,[2,40],{35:$Vw1,36:$Vx1,37:$Vy1,38:$Vz1,39:$VA1,40:$VB1,41:$VC1,42:$VD1}),o($VU1,[2,41],{35:$Vw1,36:$Vx1,37:$Vy1,38:$Vz1,39:$VA1,40:$VB1,41:$VC1,42:$VD1}),o($VU1,[2,42],{35:$Vw1,36:$Vx1,37:$Vy1,38:$Vz1,39:$VA1,40:$VB1,41:$VC1,42:$VD1}),o($VV1,[2,43],{35:$Vw1,36:$Vx1,37:$Vy1,38:$Vz1,39:$VA1,40:$VB1,41:$VC1,42:$VD1,46:$VH1,47:$VI1,48:$VJ1,49:$VK1}),o($VV1,[2,44],{35:$Vw1,36:$Vx1,37:$Vy1,38:$Vz1,39:$VA1,40:$VB1,41:$VC1,42:$VD1,46:$VH1,47:$VI1,48:$VJ1,49:$VK1}),o([5,8,13,15,17,19,21,23,24,27,28,30,31,33,52,53,55,57,63,64,65,68,69,70,86,109,110,111,112,113,114,115,116,117,118,119,120,123,125,126],[2,45],{35:$Vw1,36:$Vx1,37:$Vy1,38:$Vz1,39:$VA1,40:$VB1,41:$VC1,42:$VD1,43:$VE1,44:$VF1,45:$VG1,46:$VH1,47:$VI1,48:$VJ1,49:$VK1,50:$VL1,51:$VM1}),o([5,8,13,15,17,19,21,23,24,27,28,30,31,33,53,55,57,63,64,65,68,69,70,86,109,110,111,112,113,114,115,116,117,118,119,120,123,125,126],[2,46],{35:$Vw1,36:$Vx1,37:$Vy1,38:$Vz1,39:$VA1,40:$VB1,41:$VC1,42:$VD1,43:$VE1,44:$VF1,45:$VG1,46:$VH1,47:$VI1,48:$VJ1,49:$VK1,50:$VL1,51:$VM1,52:$VN1}),{15:[1,290],35:$Vw1,36:$Vx1,37:$Vy1,38:$Vz1,39:$VA1,40:$VB1,41:$VC1,42:$VD1,43:$VE1,44:$VF1,45:$VG1,46:$VH1,47:$VI1,48:$VJ1,49:$VK1,50:$VL1,51:$VM1,52:$VN1,53:$VO1,55:$VP1},o([5,8,13,15,17,19,21,23,24,27,28,30,31,33,55,57,63,64,65,68,69,70,86,109,110,111,112,113,114,115,116,117,118,119,120,123,125,126],[2,26],{35:$Vw1,36:$Vx1,37:$Vy1,38:$Vz1,39:$VA1,40:$VB1,41:$VC1,42:$VD1,43:$VE1,44:$VF1,45:$VG1,46:$VH1,47:$VI1,48:$VJ1,49:$VK1,50:$VL1,51:$VM1,52:$VN1,53:$VO1}),o($VQ1,[2,49]),{57:[1,291],70:[1,292]},o($Vz,[2,15]),o($Vz,[2,16]),{57:[2,136]},{57:[2,137]},{57:[2,138]},{57:[2,139]},o($V81,[2,81]),o($V81,[2,83]),o($V81,[2,84]),{19:$Vi1,21:$V91,23:$Va1,69:$Vj1,77:293,113:$Vb1,117:$Vc1,124:152,127:133,128:132},{21:$Vk1,23:$Vl1,26:294,33:$Vm1,36:$Vn1,54:$Vo1,56:$Vp1},o($V81,[2,86]),{19:$Vi1,21:$V91,23:$Va1,69:$Vj1,77:295,113:$Vb1,117:$Vc1,124:152,127:133,128:132},{57:[1,296]},o([5,8,13,15,17,19,21,23,24,27,28,30,31,33,57,63,64,65,68,69,70,86,109,110,111,112,113,114,115,116,117,118,119,120,123,125,126],[2,48],{35:$Vw1,36:$Vx1,37:$Vy1,38:$Vz1,39:$VA1,40:$VB1,41:$VC1,42:$VD1,43:$VE1,44:$VF1,45:$VG1,46:$VH1,47:$VI1,48:$VJ1,49:$VK1,50:$VL1,51:$VM1,52:$VN1,53:$VO1,55:$VP1}),{57:[1,297]},o($V81,[2,85]),o($V81,[2,87])],
defaultActions: {50:[2,1],68:[2,104],69:[2,105],70:[2,106],71:[2,107],72:[2,92],73:[2,93],74:[2,94],75:[2,95],76:[2,96],77:[2,97],78:[2,108],79:[2,109],80:[2,110],81:[2,111],82:[2,112],83:[2,113],84:[2,98],85:[2,99],86:[2,100],87:[2,101],88:[2,102],89:[2,103],91:[2,20],92:[2,21],183:[2,131],184:[2,132],240:[2,129],241:[2,130],249:[2,141],250:[2,142],251:[2,143],282:[2,136],283:[2,137],284:[2,138],285:[2,139]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

const lodash = require('lodash');
const JMP_FLAGS = {JMP: 0, JMPZ: 0,  JMPC: 0, JMPN: 0, return: 0, call: 0 };


function normalizeArrayIndex(st, useAddrRelProp = false) {
    if (typeof st.ind !== typeof st.indRR) {
        st.ind = st.ind ?? 0;
        st.indRR = st.indRR ?? 0;
    }
    delete st._fk;
    if (useAddrRelProp !== false && typeof st.useAddrRel !== 'undefined') {
        if (st.useAddrRel) st[useAddrRelProp] = 1;
        delete st.useAddrRel;
    }
}

function applyAddrRel(prefix, data) {
    let _jmp = {...data};
    if (_jmp.useAddrRel) {
        _jmp.ind = _jmp.ind ?? 0;
        _jmp.indRR = _jmp.indRR ?? 0;
        _jmp[`${prefix}UseAddrRel`] = 1;
        delete _jmp.useAddrRel;
    }
    _jmp[`${prefix}Addr`] = _jmp.offset ?? 0;
    delete _jmp.offset;
    _jmp[`${prefix}AddrLabel`] = _jmp.offsetLabel ?? '';
    delete _jmp.offsetLabel;
    return _jmp;
}

function applyCondConst(jmp, cond) {
    return { condConst: { type: '@final', value:  {type: '-' , values: [{type: 'CONSTL' , value: jmp.condConst}, cond]}}};
}
function setLine(dst, first) {
    dst.line = first.first_line;
}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* console.log("COMMENT: "+yy_.yytext) */ 
break;
case 1: /* console.log("MULTILINE COMMENT: "+yy_.yytext); */  
break;
case 2: yy_.yytext = BigInt(yy_.yytext.replace(/[\_n]/g, "")); return 33; 
break;
case 3: yy_.yytext = Number(yy_.yytext.replace(/\_/g, "")); return 21; 
break;
case 4: yy_.yytext = yy_.yytext.slice(3, -1); return "COMMAND"; 
break;
case 5: yy_.yytext = yy_.yytext.length == 2 ? "" : yy_.yytext.slice(3, -1); return 64; 
break;
case 6: yy_.yytext = yy_.yytext.length == 2 ? "" : yy_.yytext.slice(6, -1); return 65; 
break;
case 7: yy_.yytext = yy_.yytext.length == 1 ? "" : yy_.yytext.slice(2, -1); return 63; 
break;
case 8: return "LF";
break;
case 9: /* console.log("Empty spaces"); */ 
break;
case 10: return 109; 
break;
case 11: return 110; 
break;
case 12: return 111; 
break;
case 13: return 112; 
break;
case 14: return 113; 
break;
case 15: return 86; 
break;
case 16: return 114; 
break;
case 17: return 30; 
break;
case 18: return 115; 
break;
case 19: return 116; 
break;
case 20: return 118; 
break;
case 21: return 117; 
break;
case 22: return 119; 
break;
case 23: return 120; 
break;
case 24: return 74 
break;
case 25: return 72 
break;
case 26: return 75 
break;
case 27: return 88 
break;
case 28: return 89 
break;
case 29: return 100 
break;
case 30: return 99 
break;
case 31: return 87 
break;
case 32: return 93 
break;
case 33: return 103 
break;
case 34: return 94 
break;
case 35: return 95 
break;
case 36: return 104 
break;
case 37: return 105 
break;
case 38: return 76 
break;
case 39: return 92 
break;
case 40: return 90 
break;
case 41: return 101 
break;
case 42: return 102 
break;
case 43: return 91 
break;
case 44: return 96 
break;
case 45: return 106 
break;
case 46: return 97 
break;
case 47: return 98 
break;
case 48: return 107 
break;
case 49: return 108 
break;
case 50: return 82 
break;
case 51: return 83 
break;
case 52: return 84 
break;
case 53: return 123 
break;
case 54: return 125 
break;
case 55: return 126 
break;
case 56: return 31 
break;
case 57: return 17 
break;
case 58: return 29 
break;
case 59: return 30 
break;
case 60: return 24 
break;
case 61: return 27 
break;
case 62: return 85 
break;
case 63: yy_.yytext = yy_.yytext.slice(1,-1); return 32; 
break;
case 64: yy_.yytext = yy_.yytext.slice(0, -1); return 8; 
break;
case 65: return 19; 
break;
case 66: yy_.yytext = yy_.yytext.slice(1); return 23; 
break;
case 67: yy_.yytext = yy_.yytext.slice(1); return 69; 
break;
case 68: return 15; 
break;
case 69: return 70
break;
case 70: return 56
break;
case 71: return 57
break;
case 72: return 121
break;
case 73: return 122
break;
case 74: return 35
break;
case 75: return 36
break;
case 76: return 40
break;
case 77: return 38
break;
case 78: return 37
break;
case 79: return 39
break;
case 80: return 59 
break;
case 81: return 41 
break;
case 82: return 42 
break;
case 83: return 45 
break;
case 84: return 53 
break;
case 85: return 52 
break;
case 86: return 44 
break;
case 87: return 43 
break;
case 88: return 50 
break;
case 89: return 51 
break;
case 90: return 48 
break;
case 91: return 49 
break;
case 92: return 47 
break;
case 93: return 46 
break;
case 94: return 25 
break;
case 95: return 54 
break;
case 96: return 34 
break;
case 97: return 55 
break;
case 98: return 20 
break;
case 99: return 22 
break;
case 100: return 5; 
break;
case 101: /* console.log("INVALID: " + yy_.yytext); */ return 'INVALID'; 
break;
}
},
rules: [/^(?:;[^\n\r]*)/,/^(?:\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\/)/,/^(?:((0x[0-9A-Fa-f][0-9A-Fa-f_]*)|([0-9][0-9_]*))n\b)/,/^(?:(0x[0-9A-Fa-f][0-9A-Fa-f_]*)|([0-9][0-9_]*))/,/^(?:\$\$\{[^\}]*\})/,/^(?:(\$0(\{[^\}]*\})?))/,/^(?:(\$BYTE(\{[^\}]*\})?))/,/^(?:(\$(\{[^\}]*\})?))/,/^(?:[\r\n]+)/,/^(?:[ \t]+)/,/^(?:A\b)/,/^(?:B\b)/,/^(?:C\b)/,/^(?:D\b)/,/^(?:E\b)/,/^(?:RCX\b)/,/^(?:SR\b)/,/^(?:CTX\b)/,/^(?:SP\b)/,/^(?:PC\b)/,/^(?:zkPC\b)/,/^(?:RR\b)/,/^(?:STEP\b)/,/^(?:ROTL_C\b)/,/^(?:F_MLOAD\b)/,/^(?:MLOAD\b)/,/^(?:MSTORE\b)/,/^(?:JMPC\b)/,/^(?:JMPZ\b)/,/^(?:JMPNZ\b)/,/^(?:JMPNC\b)/,/^(?:JMPN\b)/,/^(?:JMP_EQ\b)/,/^(?:JMP_NE\b)/,/^(?:JMP_LT\b)/,/^(?:JMP_LE\b)/,/^(?:JMP_GT\b)/,/^(?:JMP_GE\b)/,/^(?:JMP\b)/,/^(?:CALL_C\b)/,/^(?:CALL_Z\b)/,/^(?:CALL_NC\b)/,/^(?:CALL_NZ\b)/,/^(?:CALL_N\b)/,/^(?:CALL_EQ\b)/,/^(?:CALL_NE\b)/,/^(?:CALL_LT\b)/,/^(?:CALL_LE\b)/,/^(?:CALL_GT\b)/,/^(?:CALL_GE\b)/,/^(?:CALL\b)/,/^(?:RETURN\b)/,/^(?:ASSERT\b)/,/^(?:SYS\b)/,/^(?:MEM\b)/,/^(?:STACK\b)/,/^(?:INCLUDE\b)/,/^(?:VAR\b)/,/^(?:GLOBAL\b)/,/^(?:CTX\b)/,/^(?:CONST\b)/,/^(?:CONSTL\b)/,/^(?:REPEAT\b)/,/^(?:"[^"]+")/,/^(?:[a-zA-Z_][a-zA-Z$_0-9]*:)/,/^(?:[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?:%[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?:@[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?::)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:%)/,/^(?:=>)/,/^(?:<<)/,/^(?:>>)/,/^(?:\^)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&)/,/^(?:\|)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:=)/,/^(?:!)/,/^(?:\?\?)/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = zkasm_parser;
exports.Parser = zkasm_parser.Parser;
exports.parse = function () { return zkasm_parser.parse.apply(zkasm_parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}