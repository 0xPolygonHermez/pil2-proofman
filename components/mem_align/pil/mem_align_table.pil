const int MEM_ALIGN_TABLE_ID = 52

subproof MemAlignTable(2**19) {
    
    // rows:
    //      32 clock (0-31) * 
    //      65 offsets (0-64) * 
    //      33 lengths (0-32) * 
    //      2 left/right (0-1)* 
    //      2 le/be (0-1) = 274560 (2^19 = 524288)

    const int CLOCKS = 32;

    const int TIMES = MAX_LEN * MAX_OFFSET * 4;

    col fixed CLOCK = [[0..(CLOCKS-1)]:TIMES,0...];
    col fixed MODE_SELM1_SELM0;
    col fixed T_BYTE_POS;
    
    const int LA_FLAG_4 = LEFT_ALIGN_FLAG * 4;
    const int LE_FLAG_4 = LITTLE_ENDIAN_FLAG * 4;
    const int LALE_FLAGS_4 = (LEFT_ALIGN_FLAG + LITTLE_ENDIAN_FLAG) * 4;

    int irow = 0;
    // #pragma profile on
    #pragma message loop1-begin
    for (int len = 0; len <= MAX_LEN; ++len) {    
        for (int offset = 0; offset <= MAX_OFFSET; ++offset) {
            const int mode_base = (offset + LEN_FACTOR * len) * 4; 
            int _len = len == 0 ? 32:0;
            if (_len + offset > 64) {
                _len = 64 - offset;
            }            
            for (int clock = 0; clock < 32; ++clock) {
                const int value = (64 - offset + clock);
                const int byte = value % 32;
                const int isM0 = value >= 64 ? 1:0;

                const int mode = mode_base + 2 * (byte < len ? 1 - isM0 : 0) + (byte < len ? isM0 : 0);

                MODE_SELM1_SELM0[irow] = mode;
                MODE_SELM1_SELM0[irow + 32] = mode + LA_FLAG_4;
                MODE_SELM1_SELM0[irow + 64] = mode + LE_FLAG_4;
                MODE_SELM1_SELM0[irow + 96] = mode + LALE_FLAGS_4;           

                T_BYTE_POS[irow] = (byte + (32 - _len)) % 32;
                T_BYTE_POS[irow + 32] = byte;
                T_BYTE_POS[irow + 64] = 31 - byte;
                T_BYTE_POS[irow + 96] = (31 + _len - byte) % 32;

                irow = irow + 1;
            }
            irow = irow + 96;
        }
    }
    // #pragma profile off
    #pragma message loop1-end
    #pragma message loop2-begin
    const int T_BYTE_POS_0 = T_BYTE_POS[0];
    const int MODE_SELM1_SELM0_0 = MODE_SELM1_SELM0[0];
    while (irow < N) {
        MODE_SELM1_SELM0[irow] = MODE_SELM1_SELM0_0;
        T_BYTE_POS[irow] = T_BYTE_POS_0;
        irow = irow + 1;
    }
    #pragma message loop2-end
    lookup_proves(MEM_ALIGN_TABLE_ID, 1, [CLOCK, MODE_SELM1_SELM0, T_BYTE_POS]);
}